#!/usr/bin/env bash
# vim: filetype=sh

{{ if (eq .chezmoi.os "linux") -}}

# DEBUG
set -x

echo "Short-circuiting: not installing gnome extensions"
exit 0


###############################################################################
# Advising trap -- cannot add multiple traps to the same signal
# Copied from https://stackoverflow.com/a/7287873
###############################################################################
# note: printf is used instead of echo to avoid backslash
# processing and to properly handle values that begin with a '-'.

log() { printf '%s\n' "$*"; }
error() { log "ERROR: $*" >&2; }
fatal() { error "$@"; exit 1; }

# appends a command to a trap
#
# - 1st arg:  code to add
# - remaining args:  names of traps to modify
#
trap_add() {
  trap_add_cmd=$1; shift || fatal "${FUNCNAME} usage error"
  for trap_add_name in "$@"; do
    trap -- "$(
    # helper fn to get existing trap command from output
    # of trap -p
    extract_trap_cmd() { printf '%s\n' "$3"; }
    # print existing trap command with newline
    eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
    # print the new trap command
    printf '%s\n' "${trap_add_cmd}"
    )" "${trap_add_name}" \
      || fatal "unable to add to trap ${trap_add_name}"
    done
}
# set the trace attribute for the above function.  this is
# required to modify DEBUG or RETURN traps because functions don't
# inherit them unless the trace attribute is set
declare -f -t trap_add
###############################################################################
# End trap advice
###############################################################################

readonly extensions_dir="${HOME}/.local/share/gnome-shell/extensions"
mkdir -p "${extensions_dir}"
pushd "${extensions_dir}" || exit 1

declare -a extensions_no_nested_directory=(
  "https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator.git"
)

for extension in "${extensions_no_nested_directory[@]}"
do
  repo="$(basename "${extension}")"
  dir="${repo%.git}"
  if [ ! -d "${dir}" ]
  then
    git clone "${extension}"
    gnome-extensions enable "$(jq --raw-output '.uuid' "${dir}/metadata.json")"
  fi
done

# FIXME: none of these are working in gnome
declare -a extensions_with_nested_directory=(
  "https://github.com/kgshank/gse-sound-output-device-chooser.git"
  "https://github.com/coadmunkee/gnome-shell-extension-espresso.git"
  "https://github.com/nunofarruca/WindowIsReady_Remover.git"
)

for extension in "${extensions_with_nested_directory[@]}"
do
  repo="$(basename "${extension}")"
  dir="${repo%.git}"
  if [ ! -d "${dir}" ]
  then
    tmp="$(mktemp --directory)"
    trap 'rm -rf "${tmp}"' EXIT
    git clone "${extension}" "${tmp}/"
    metadata="$(find "${tmp}" -type f -name metadata.json)"
    payload_directory="$(dirname "${metadata}")"
    mv "${payload_directory}" "${dir}"
    gnome-extensions enable "$(jq --raw-output '.uuid' "${dir}/metadata.json")"
  fi
done

{{ end -}}
