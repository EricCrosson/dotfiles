#!/usr/bin/env bash
# Written by Eric Crosson
# 2015-06-29

# TODO: consider error-handling with git cherry-pick --abort
# TODO: document

[[ -z $(git rev-parse --is-inside-work-tree 2>/dev/null) ]] && \
    _error "not inside a git repo"

declare -r verbosity='--quiet'
declare -r current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
target_branch=master
sha=$(git log --pretty=oneline --abbrev-commit | head -n1 | awk '{print $1}')
unset push_target_branch push_current_branch no_cherry_pick

# Error code determined dynamically, based on stack trace
_error() {
    local err=0
    for i in ${BASH_LINENO[@]}; do
        let err+=$i
    done
    let err=$((err%255))
    echo "Error: $1"
    exit ${err:-1}
}

_help() {
    cat <<EOF
$0: [h|d] [p|pp] <b> <s|n>

  h   | help               print this message
  d   | debug              echo git actions instead
  q   | quiet              no output if no errors

  b   | branch             select target branch
  s   | sha                select target sha
  n   | no-sha             don't cherry pick anything

  p   |                    push target
  pp  |                    push target and current
EOF
    exit
}

_finish() {
    git checkout $current_branch &>/dev/null
}
trap _finish EXIT

### git control functions
_checkout() {
    ${debug} git checkout ${verbosity} $1
    [[ $? -eq 0 ]] || _error "checkout of $1 failed"
    chmod 644 ~/.ssh/config &>/dev/null
}

_push() {
    local target tmp push_target
    target=${!1}
    tmp=push_$1
    push_target=${!tmp}
    if [[ -n $push_target ]]; then
        ${debug} git push ${verbosity} origin $target
        if [[ $? -eq 0 ]]; then
            echo "Branch $target pushed successfully"
        else
            _error "push of $target failed"
        fi
    fi
}

_cherry_pick() {
    if [[ -z $no_cherry_pick ]]; then
        ${debug} git cherry-pick $1
        # TODO: determine when a merge conflict has happened, and suspend the script
        # into the background, ready to resume with `fg` (or something)
        if [[ $? -ne 0 ]]; then
            local on_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
            _error "cherry-pick of $1 in branch $on_branch failed"
        fi
    fi
}
### end git control functions

### fzf functions
_fcheck() {
    [[ -z $(which fzf) ]] && _error "fzf not installed"
}

fbranch() {
    _fcheck
    local branches branch
    branches=$(git branch | grep -v HEAD) &&
        branch=$(echo "$branches" |
                        fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    echo -n $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fsha() {
    _fcheck
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
        echo -n $(echo "$commit" | sed "s/ .*//")
}
### end fzf functions

while true; do
    [[ -z $sha || -z $target_branch ]] && _error "bad selection from fzf"
    case $1 in
        h|help|-h|--help)   _help ;;
        s|sha)               sha=$(fsha) ;;
        n|no-sha)            no_cherry_pick=1 ;;
        b|branch)            target_branch=$(fbranch) ;;
        d|debug)             debug=echo ;;
        q|quiet)             exec > /dev/null ;;
        pp)                  push_current_branch=1
                             push_target_branch=1 ;;
        p)                   push_target_branch=1 ;;
        *)                   break ;;
    esac
    shift
done

[[ "$target_branch" == "$current_branch" ]] && \
    _error "target_branch and current_branch cannot match: currently $target_branch"

_checkout $target_branch
_cherry_pick $sha
_push "target_branch"
_checkout $current_branch
_push "current_branch"
