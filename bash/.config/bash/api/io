# -*- mode: sh; -*-

_zero="${BASH_SOURCE[0]}"
_zero="$(basename ${_zero%.sh})"
_zero=$(echo "${_zero}" | tr [a-z] [A-Z] | sed -e 's/[.-]/_/g')
[[ -n "${!_zero}" ]] && return
printf -v ${_zero} "Loaded"

# Avoid adding duplicates to a path. $2, if non-nil, is the variable
# to append $1 to
pathAppend() {
    newPath=$1; list=$2; shift; shift
    [[ -z $newPath ]] && return $false;
    [[ -z $list ]] && list=PATH
    [[ -z $(echo ${!list}|grep $newPath) ]] && export $(echo $list)="${!list}:$newPath"; }

loadFile() { [[ -f $1 ]] && source "$1" || echoerr "$1 not found"; }

## For all functions below:
# ARGS: color, string_to_print
changeColor() { echo -ne $1 ; }

# Does not append newline
message() { changeColor ${1}; echo -ne "$2"; changeColor ${Color_Off}; }

## These functions do append newlines
# Functions for printing errors
export ALERT="(i)"
warning() { message ${BYellow} "warning: " 1>&2; message ${BWhite} "$\n" 1>&2; }
echoerr() { echo "$@" 1>&2; } # echo to stderr
error() { message ${BRed} "error: " 1>&2; message ${BWhite} "$@\n" 1>&2; }

# Functions for printing
section() { message ${BBlue} ":: "; message ${BWhite} "$@\n"; }
note() { message ${BGreen} "==> "; message ${BWhite} "$@\n"; }
subnote() { message ${BBlue} "  -> "; message ${BWhite} "$@\n"; }
## End functions that append newlines

# Functinon to append a command to a trap
# $0 (code) (traps to modify)
trap_add() {
    trap_add_cmd=$1; shift || echo "${FUNCNAME} usage error"
    for trap_add_name in "$@"; do
        trap -- "$(
            # helper fn to get existing trap command from output
            # of trap -p
            extract_trap_cmd() { printf '%s\n' "$3"; }
            # print existing trap command with newline
            eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
            # print the new trap command
            printf '%s\n' "${trap_add_cmd}"
        )" "${trap_add_name}" \
            || echo "unable to add to trap ${trap_add_name}"
    done
}
declare -f -t trap_add

# This function provides a safe way to prompt for passwords. The
# result is stored in $secret_passwd
query_password() {
    read -p "Password: " -s secret_passwd && echo "" # insert carriage return
    # TODO: find a way to abort nicely
    # [[ -z $secret_passwd ]] && exit 1
}

# Printing stack traces
print_call_trace()
{
    # skipping i=0 as this is print_call_trace itself
    for ((i = 1; i < ${#FUNCNAME[@]}; i++)); do
        echo -n  ${BASH_SOURCE[$i]}:${BASH_LINENO[$i-1]}:${FUNCNAME[$i]}"(): "
        sed -n "${BASH_LINENO[$i-1]}p" $0
    done
}

ntest()
{
    if [[ $(which prettyping.sh) ]]; then
        prettyping.sh google.com
    else
        ping -c3 google.com
    fi
}

export config=$HOME/.config
export classes=$HOME/classes
export scripts=$HOME/bin
export bash_config=${config}/bash
export aliases=${bash_config}/aliases
export user_init_d=${bash_config}/user.init

loadFile ${bash_config}/api/colors
