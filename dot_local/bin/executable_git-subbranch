#!/usr/bin/env bash
#
# Extract a commit from the current branch into a new branch created
# from specified parent branch.
#
# Usage:
#  git-subbranch [-p] [-o|-d] [-b <new_branch>|-t <ticket>] [-s <start_point>] [<commit>...]
#
# Options:
#   -p --push           Push the new branch
#   -o --open           Open a pull-request (implies --push)
#   -d --draft          Open a pull-request in draft state (implies --push)
#   -b <new_branch>     The name to use for the newly-created branch
#   -t <ticket>         The ticket to use as a prefix for this branch name
#   -s <start_point>    The branch from which to create the new branch
#   <commit>            SHA-1 hash of the git commit to cherry-pick (defaults to HEAD)
#
# Requirements:
# - (hub)[https://github.com/github/hub]
#   - to open pull-requests
#
# @example
# git subbranch -b my-cool-feature develop a1d2f37
#
# @example
# git subbranch -t JIRA-12345 develop a1d2f37
#
# @example
# git subbranch develop a1d2f37

set -o errexit
set -o nounset
set -o pipefail

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly __dir
# required to add ./docopts to PATH
PATH="${PATH}:${__dir}"
# shellcheck source=./executable_docopts.sh
source "${__dir}/docopts.sh" --auto "$@"
# shellcheck disable=SC2119
# docopt_print_ARGS

function git_default_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local branch
  for branch in 'develop' 'test' 'main' 'trunk'; do
    if command git show-ref -q --verify refs/heads/$branch; then
      echo $branch
      return
    fi
  done
  echo master
}

readonly branch_prefix_template="eric/ESC-00"

random_number() {
  shuf -i 1-99 -n 1
}

random_branch_prefix() {
  echo "${branch_prefix_template/00/$(random_number)}"
}

commit_subject() {
  git log -n 1 --pretty=%s "${1:?must identify commit to grab commit subject}"
}

one_word() {
  local string="${1:?must provide a string to condense into a single word}"
  echo "${string//[ .:^~?*@()<>]/-}" | tr -s '-'
}

branch_name_from_commit_subject() {
  local commit="${1:?must provide sha to generate a branch name}"
  local prefix="${2:-$(random_branch_prefix)}"
  echo "${prefix}-$(one_word "$(commit_subject "${commit}")")"
}

commit=""
sha=""
if [[ "${ARGS[<commit>,#]}" == 0 ]]; then
  commit="$(git rev-parse HEAD)"
  sha="$(git rev-parse HEAD)"
else
  sha="${ARGS[<commit>,0]}"
  i=0
  while [[ $i -lt "${ARGS[<commit>,#]}" ]]; do
    commit="${commit} ${ARGS[<commit>,$i]}"
    i=$((i+1))
  done
fi

if [[ -n "${ARGS[-t]}" ]]; then
  ticket="$(branch_name_from_commit_subject "${sha}" "${ARGS[-t]}")"
fi

readonly start_point="${ARGS[<start_point>]:-$(git_default_branch)}"
readonly new_branch="${ticket:-${ARGS[-b]:-$(branch_name_from_commit_subject "${sha}")}}"

current_branch="$(git rev-parse --abbrev-ref HEAD)"
readonly current_branch

# echo "new_branch: ${new_branch}"
# echo "start_point: ${start_point}"
# echo "commit: ${commit}"

git checkout -b "${new_branch}" "${start_point}"
# shellcheck disable=SC2086
git cherry-pick ${commit}

# push the new branch
if [[ "${ARGS[--push]}" == true || "${ARGS[--open]}" == true || "${ARGS[--draft]}" == true ]]; then
  git push origin "${new_branch}"
fi

# open a pull-request
if [[ "${ARGS[--open]}" == true ]]; then
  # FEATURE: add a --edit flag
  hub pull-request --no-edit --browse
elif [[ "${ARGS[--draft]}" == true ]]; then
  hub pull-request --no-edit --browse --draft
fi

git checkout "${current_branch}"
