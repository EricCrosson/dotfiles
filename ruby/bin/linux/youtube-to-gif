#!/usr/bin/env ruby
#
# Download a youtube video and extract a gif
# Copyright (C) 2014  Eric S Crosson (esc)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#
# This script is used to extract a gif from a youtube video, replacing
# the following procedure
#
# 1. youtube-dl <youtube-link>
# 2. ffmpeg -t <duration> -ss <HH:MM:SS start> -i <youtube-video> <output.gif>
# 3. (work in progress) upload to gfycat and expose public url
#
# This script exposes the output gif, as well as the title of the
# youtube video and link to the youtube source (starting at the
# beginning of the excerpt).

require 'uri'
require 'open3'
require 'net/http'
require 'fileutils'
require 'shellwords'

# Display help information and exit.
def usage
  help_message = <<-eos
  #{$PROGRAM_NAME} [-h] <youtube-link> <start-time> <duration> <output>

  -h              Display this help message
  youtube-link    Link to youtube video to download
  start-time      Start time of excerpt to extract
  duration        Duration of excerpt to extract
  output          Output file to save gif excerpt as
eos
  puts help_message
  exit
end

# Exit with a message to install missing dependencies unless all are
# present.
def ensure_dependiencies_are_installed
  missing_dependency = false
  dependencies = ['youtube-dl', 'ffmpeg']
  dependencies.each do |dependency|
    unless system("which #{dependency} &>/dev/null")
      puts "Missing dependency: #{dependency}"
      missing_dependency = true
    end
  end
  exit if missing_dependency
end

def formatted_time(time)
  time
end

# Generate a temporary working directory to place intermediate files.
DIRECTORY_PREFIX = '/tmp/'
def temp_working_directory(directory = nil)
  begin
    directory = "#{DIRECTORY_PREFIX}youtube-dl#{rand}"
  end while File.directory? directory
  directory
end

# Extract the file name of FILE, a downloaded youtube video.
def yt_video_name_of(file)
  File.basename file, '.*'
end

YOUTUBE_LINK = ARGV[0]                   or usage
# TODO: ensure START_TIME is correctly formatted
START_TIME   = formatted_time(ARGV[1])   or usage
DURATION     = ARGV[2]                   or usage
output       = File.expand_path(ARGV[3]) or usage
# ensure output filename specifies .gif format
output = "#{output}.gif" unless output.include? '.gif'

ensure_dependiencies_are_installed
twd = temp_working_directory

# 1. youtube-dl <youtube-link>
begin
  YOUTUBE_DL_BIN = 'youtube-dl'
  youtube_dl_command = [YOUTUBE_DL_BIN,
                        '-o', "#{twd}/%(title)s.%(ext)s",
                        YOUTUBE_LINK]
  Open3.popen3(Shellwords.join youtube_dl_command) do |_stdin, _stdout, stderr, _wait_thr|
    while line = stderr.gets
      puts line
    end
  end
end

downloaded_file = Dir["#{twd}/*"].first
puts "Youtube video: #{yt_video_name_of downloaded_file}"

# 2. ffmpeg -t <duration> -ss <HH:MM:SS start> -i <youtube-video> <output.gif>
begin
  FFMPEG_BIN = 'ffmpeg'
  ffmpeg_command = [FFMPEG_BIN,
                    '-i', downloaded_file,
                    '-t', DURATION,
                    '-ss', START_TIME,
                    output]
  Open3.popen3(Shellwords.join ffmpeg_command) do |_stdin, stdout, _stderr, _wait_thr|
    while line = stdout.gets
      puts line
    end
  end
end

# 3. upload to gfycat and expose public url
# uri = URI.parse('https://gifaffe.s3.amazonaws.com/')

# Finally, clean up
FileUtils.rm_rf twd
