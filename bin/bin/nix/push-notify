#!/usr/bin/env bash
#
## @file
## @author Eric Crosson <esc@ericcrosson.com>
## @brief Send pushover notifications regarding the status of a shell
## command's execution.
## @copyright WTFPLv2
## @version 1.0
#
#########
# License:
#
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2015 Eric Crosson
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.
#
#########
#
## @details
## @par Script abstract
##
## This script wraps a shell command and sends a pushover notification when:
## - the command begins execution, noting pwd and the command that has begin; and
## - the command finishes execution, noting the command's exit code.
##
## @par Usage
##
## Simply preface your desired command with this script. Usage is
## identical to the `time` command.
#
## @addtogroup PushNotify Pushover notification lib

## @fn print_exit_code()
## @brief Internal use only.
## @details Print to STDOUT the exit code of COMMAND.
## @param exit_code Exit code to print
## @retval 0 if success
## @ingroup PushNotify
print_exit_code() {

    echo -e "\nExit code: ${1}\n";
}

## @fn pushover_send_notification()
## @brief Send a pushover notification.
## @param header notification header
## @param message message to send in notification body
## @retval 0 if success
## @ingroup PushNotify
pushover_send_notification() {

    curl -s -k                           \
	--form-string "user=${USER_KEY}"       \
	--form-string "token=${APP_TOKEN}"     \
	--form-string "title=${1}"             \
	--form-string "message=${2}"           \
	${PUSHOVER_URL}
}
# TODO: ensure this works behind a proxy and without the proxy

## @fn pushover_ensure_valid_delivery()
## @brief Stall for @PUSHOVER_PROPOGATION_DELAY seconds to ensure the
## Pushover notifications received by the end user arrive in
## chronological order.
## @retval 0 if success
## @ingroup PushNotify
pushover_ensure_valid_delivery() {

    sleep ${PUSHOVER_PROPOGATION_DELAY}
}

## @var String PUSHOVER_URL
## @brief Internal use only.
## @details Pushover url that accepts POST requests.
## @ingroup PushNotify
declare -rl PUSHOVER_URL="https://api.pushover.net/1/messages.json";

## @var String USER_KEY
## @brief Internal use only.
## @details esc's Pushover user key.
## @ingroup PushNotify
declare -r USER_KEY="uCSwKMjQH1SyuigpzrH25z6Q3tkUwj";

## @var String APP_TOKEN
## @brief Internal use only.
## @details esc's token corresponding to the Intel notifications.
## @ingroup PushNotify
declare -r APP_TOKEN="aNMqmC6KzK5wag3fd7tKYecwLEPrvU";

## @var String PWD
## @brief Internal use only.
## @details Present working directory of command invocation.
## @ingroup PushNotify
declare -r PWD=$(pwd);

## @var String COMMAND
## @brief Internal use only.
## @details Command to execute.
## @ingroup PushNotify
declare -r COMMAND="$@";

## @var int PUSHOVER_PROPOGATION_DELAY
## @brief Internal use only.
## @details Number of seconds to delay to ensure Pushover
## notifications are received by the end user in chronological order.
## @ingroup PushNotify
declare -ri PUSHOVER_PROPOGATION_DELAY=2;

pushover_send_notification "Action invoked: ${PWD}" "${COMMAND}"

${COMMAND}
## @var int EXIT_CODE
## @brief Internal use only.
## @details Exit code of COMMAND
## @ingroup PushNotify
declare -ri EXIT_CODE=$?;
print_exit_code ${EXIT_CODE}

pushover_ensure_valid_delivery
pushover_send_notification "Action completed: ${PWD}" "Exit code: ${EXIT_CODE}"
