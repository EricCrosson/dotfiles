#!/usr/bin/env bash
#
## \file
## \author Eric Crosson <eric.s.crosson@utexas.edu>
## \brief Print a number in a new radix.
## \copyright WTFPLv2
## \version 1.0
#
#########
# License:
#
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2014 Eric Crosson
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.
#
#########
#
## \details
## \par Script abstract
##
## Convert a number from one radix to another.
##
## \par Usage
## \param number_to_convert The number to print in a new radix.
## \param new_radix The radix to print \number_to_convert in.
## \param old_radix [Optional] The old radix of the number, of not 10.
#
## \addtogroup LibMath Numeric transformation functions

# Execute getopt
ARGS=$(getopt -o h -l "help" -n "$0" -- "$@");

# Fail on bad arguments
if [ $? -ne 0 ]; then
    exit 1
fi

eval set -- "${ARGS}";

## @var HELP_RPRINT
## @brief Contains script invocation information
## @details Contains script invocation information and abstract.
## @ingroup LibMath
declare HELP_RPRINT
HELP_RPRINT=$(cat <<'EOF'
rprint [number to convert] [new radix] <old radix>'
            <old radix> defaults to 10'

  -h : print this help menu

EOF
)

if [[ "$#" -ne 3 && "$#" -ne 4 ]]; then
    echo -e "${HELP_RPRINT}"
    exit
fi

## @var old_radix
## @brief For internal use only.
## @details The radix of the number to convert.
## @ingroup LibMath
declare -i old_radix=${4}||10

# Obey command line arguments
while true; do
    case "${1}" in

	-h|--help)
	    echo -e "${HELP_RPRINT}"
	    exit
	    ;;

	--)
	    shift
	    break ;;
    esac
    shift
done

## @fn rprint
## @brief Convert a number from one radix to another
## @details Convert $1 from radix $2 to $3
## @ingroup LibMath
rprint() {

    ruby -e "puts \"${1}\".to_i(\"${2}\".to_i).to_s(${3}.to_i).upcase"
}

rprint ${1} ${old_radix} ${2}
