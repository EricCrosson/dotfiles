#!/usr/bin/env zsh

# verify we are inside a git repo
[[ -z $(git rev-parse --is-inside-work-tree 2>/dev/null) ]] && _error "not inside a git repo" 2

declare -r current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
target_branch=master
sha=$(git log --pretty=oneline | head -n1 | awk '{print $1}')
unset no_cherry_pick push_target_branch push_current_branch

_error() {
    echo "Error: $1"
    exit ${2:-1}
}

_help() {
    cat <<EOF
$0: [h|d] [p|pp] <b> <s|n>

  h   | help
  d   | debug

  b   | branch             select target branch
  s   | sha                select target sha
  n   | no-sha             don't cherry pick anything

  p   |                    push target
  pp  |                    push target and current
EOF
    exit
}

_finish() {
    git checkout $current_branch &>/dev/null
}
trap _finish EXIT

_fcheck() {
    [[ -z $(which fzf) ]] && _error "fzf not installed" 2
}

### fzf functions
fbranch() {
    local branches branch
    branches=$(git branch | grep -v HEAD) &&
        branch=$(echo "$branches" |
                        fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    echo -n $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fsha() {
    [[ -z $(git rev-parse --is-inside-work-tree 2>/dev/null) ]] && return
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
        echo -n $(echo "$commit" | sed "s/ .*//")
}
### end fzf functions

while true; do
    # exit if a fzf command has given bad input
    [[ -z $sha || -z $target_branch ]] && _error "bad data from fzf"
    case $1 in
        h|help)   _help ;;
        s|sha)    _fcheck
                  sha=$(fsha) ;;
        n|no-sha) no_cherry_pick=1 ;;
        b|branch) _fcheck
                  target_branch=$(fbranch) ;;
        d|debug)  debug=echo ;;
        pp)       push_current_branch=1
                  push_target_branch=1 ;;
        p)        push_target_branch=1 ;;
        *)        break ;;
    esac
    shift
done

${debug} git checkout --quiet $target_branch
[[ $? -eq 0 ]] || _error "checkout of $target_branch failed"

if [[ -z $no_cherry_pick ]]; then
    ${debug} git cherry-pick $sha
    [[ $? -eq 0 ]] || _error "cherry-pick of $sha failed"
fi

if [[ -n $push_target_branch ]]; then
    ${debug} git push --quiet origin $target_branch
    if [[ $? -eq 0 ]]; then
        echo "Branch $target_branch pushed successfully"
    else
        _error "push of $target_branch failed"
    fi
fi

${debug} git checkout --quiet $current_branch
[[ $? -eq 0 ]] || _error "checkout of $current_branch failed"

if [[ -n $push_current_branch ]]; then
    ${debug} git push --quiet origin $current_branch
    if [[ $? -eq 0 ]]; then
        echo "Branch $current_branch pushed successfully"
    else
        _error "push of $current_branch failed"
    fi
fi
