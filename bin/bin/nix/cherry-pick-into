#!/usr/bin/env zsh

# verify we are inside a git repo
[[ -z $(git rev-parse --is-inside-work-tree 2>/dev/null) ]] && _error "not inside a git repo" 2

declare -r verbosity='--quiet'
declare -r current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
target_branch=master
sha=$(git log --pretty=oneline --abbrev-commit | head -n1 | awk '{print $1}')
unset no_cherry_pick push_target_branch push_current_branch

_error() {
    echo "Error: $1"
    exit ${2:-1}
}

_help() {
    cat <<EOF
$0: [h|d] [p|pp] <b> <s|n>

  h   | help
  d   | debug

  b   | branch             select target branch
  s   | sha                select target sha
  n   | no-sha             don't cherry pick anything

  p   |                    push target
  pp  |                    push target and current
EOF
    exit
}

_finish() {
    git checkout $current_branch &>/dev/null
}
trap _finish EXIT

### git control functions
_checkout() {
    ${debug} git checkout ${verbosity} $1
    if [[ $? -ne 0 ]]; then
        _error "checkout of $1 failed"
    fi
    chmod 644 ~/.ssh/config &>/dev/null
}

# TODO: bash variable indirection to determine $1 from $2
_push() {
    echo "$@"
    return
    if [[ -n $2 ]]; then
        ${debug} git push ${verbosity} origin $1
        if [[ $? -eq 0 ]]; then
            echo "Branch $1 pushed successfully"
        else
            _error "push of $1 failed"
        fi
    fi
}

_cherry_pick() {
    if [[ -z $no_cherry_pick ]]; then
        ${debug} git cherry-pick $1
        # TODO: determine when a merge conflict has happened, and suspend the script
        # into the background, ready to resume with `fg` (or something)
        [[ $? -eq 0 ]] || _error "cherry-pick of $1 failed"
    fi
}
### end git control functions

### fzf functions
_fcheck() {
    [[ -z $(which fzf) ]] && _error "fzf not installed" 2
}

fbranch() {
    local branches branch
    branches=$(git branch | grep -v HEAD) &&
        branch=$(echo "$branches" |
                        fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    echo -n $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fsha() {
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
        echo -n $(echo "$commit" | sed "s/ .*//")
}
### end fzf functions

while true; do
    # exit if a fzf command has given bad input
    [[ -z $sha || -z $target_branch ]] && _error "bad selection from fzf"
    case $1 in
        h|help)   _help ;;
        s|sha)    _fcheck
                  sha=$(fsha) ;;
        n|no-sha) no_cherry_pick=1 ;;
        b|branch) _fcheck
                  target_branch=$(fbranch) ;;
        d|debug)  debug=echo ;;
        pp)       push_current_branch=1
                  push_target_branch=1 ;;
        p)        push_target_branch=1 ;;
        *)        break ;;
    esac
    shift
done

_checkout $target_branch
# _cherry_pick $sha
_push $target_branch $push_target_branch
_checkout $current_branch
_push $current_branch $push_current_branch
