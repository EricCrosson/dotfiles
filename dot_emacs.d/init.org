#+author: Eric Crosson
#+email: esc@ericcrosson.com
#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) | OPTIONAL(o) HIATUS(h) DONE(d) DISCARDED(c) HACKED(k)
#+startup: content
* init.el
:PROPERTIES:
:header-args: :comments link :tangle init.el
:END:
** Introduction
Nothing is ever officially underway until a legal disclaimer of some
sort is produced
#+BEGIN_SRC emacs-lisp
    ;;; .emacs.el

    ;;; Commentary:
    ;;; This is the .emacs file written and used by esc. The .el file is
    ;;; not the original form of this document; it was written in org
    ;;; babel. If you are not viewing the org document, you should try to
    ;;; locate it. It's much nicer to humans.

    ;;; License:
    ;;; esc's .emacs configuration file, for a smoother Emacs experience.
    ;;; Copyright (C) 2013 Eric Crosson
    ;;;
    ;;; This program is free software: you can redistribute it and/or modify
    ;;; it under the terms of the GNU General Public License as published by
    ;;; the Free Software Foundation, either version 3 of the License, or
    ;;; (at your option) any later version.
    ;;;
    ;;; This program is distributed in the hope that it will be useful,
    ;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    ;;; GNU General Public License for more details.
    ;;;
    ;;; You should have received a copy of the GNU General Public License
    ;;; along with this program. If not, see <http://www.gnu.org/licenses/>.

    ;;; Code:
#+END_SRC

*** User data
Hello, My Name Is
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Eric Crosson"
        user-mail-address "esc@ericcrosson.com"
        user-preferred-terminal "kitty")
#+END_SRC

** Time sensitive
This code is important to run as early as possible, to avoid initially
rendering what are ultimately unnecessary graphical elements.

First order of business: let's get out the rat poison.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (mapc (lambda (mode) (when (fboundp mode) (funcall mode -1)))
          '(menu-bar-mode
            tool-bar-mode
            scroll-bar-mode)))
#+END_SRC

** Package management
*** Archives
Configure remote package archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (mapc (lambda (source) (add-to-list 'package-archives source) t)
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ;("org" . "https://orgmode.org/elpa/")
  ))
  (package-initialize)
#+END_SRC

*** Use-package
First there was =use-package=
#+BEGIN_SRC emacs-lisp
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

*** Quelpa
#+BEGIN_SRC emacs-lisp
  (use-package quelpa :ensure t)
  (use-package quelpa-use-package
    :ensure t
    :after (quelpa))
#+END_SRC

*** exec-path-from-shell
Which came first, the Emacs or the shell?
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :pin melpa-stable
    :config
    ;; (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
    ;; )
#+END_SRC

** Layout and load paths
#+BEGIN_SRC emacs-lisp
  (defcustom esc-meta-directory "~/.emacs.d/meta/"
    "Path to .emacs.d meta directory, for internal bookkeeping records."
    :type 'path
    :options '("~/.emacs.d/meta")
    :group 'esc-init)

  (defcustom esc-secrets-directory "~/.emacs.d/secrets/"
    "Path to .emacs.d secrets directory, for internal data."
    :type 'path
    :options '("~/.emacs.d/secrets")
    :group 'esc-init)
#+END_SRC

** UI
*** mode-line minimization
[[https://github.com/jordonbiondo/.emacs.d/blob/master/jordon/jordon-mode-line.el][Relevant link]]
;; TODO: extract minor-mode
;; TODO: allow restoring of mode-line
#+BEGIN_SRC emacs-lisp
  (defun esc-fancy-mode-line-render (left center right &optional lpad rpad)
    "Return a string the width of the current window with
  LEFT, CENTER, and RIGHT spaced out accordingly, LPAD and RPAD,
  can be used to add a number of spaces to the front and back of the string."
    (condition-case err
        (let* ((left (if lpad
                         (concat (make-string lpad ?\s) left)
                       left))
               (right (if rpad
                          (concat right (make-string rpad ?\s))
                        right))
               (width (apply '+ (window-width)
                             (let ((m (window-margins)))
                               (list (or (car m)
                                         0)
                                     (or (cdr m)
                                         0)))))
               (total-length (+ (length left)
                                (length center)
                                (length right)
                                2)))
          (when (> total-length width)
            (setq left "" right ""))
          (let* ((left-space (/ (- width (length center)) 2))
                 (right-space (- width left-space (length center)))
                 (lspaces (max (- left-space (length left)) 1))
                 (rspaces (max (- right-space (length right)) 1 0)))
            (concat left (make-string lspaces  ?\s) center
                    (make-string rspaces ?\s) right)))
      (error (format "[%s]: (%s) (%s) (%s)" err left center right))))

  (defvar esc-mode-line-format
    '((:eval (esc-fancy-mode-line-render
              (format-mode-line
               (format " %d %s (%%l/%d) "
                       (eyebrowse--get 'current-slot)
                       (downcase (format-mode-line mode-name))
                       (line-number-at-pos (point-max))))
              (concat
               (cond ((and default-directory
                           (file-remote-p default-directory)) "@ ")
                     (t ""))
               (format-mode-line mode-line-buffer-identification)
               (cond ((not (buffer-file-name)) " ")
                     ((buffer-modified-p) "*")
                     (t " ")))
              (format-mode-line mode-line-process) 1 3))))

  (setq-default mode-line-format esc-mode-line-format)
#+END_SRC

*** Fonts
#+BEGIN_SRC emacs-lisp
  (defun font-exists-p (font)
    "True FONT is recognized by Emacs, nil otherwise."
    (member font (font-family-list)))
#+END_SRC

Favored font of late
#+BEGIN_SRC emacs-lisp
  (let ((esc-font "Hack"))
    ;; use `esc-font`
    (when (font-exists-p esc-font)
      (set-face-attribute 'default nil
                          :font esc-font
                          :height 110
                          :weight 'normal
                          :width 'normal)))
#+END_SRC

Highlight escape sequences
#+BEGIN_SRC emacs-lisp
  (use-package highlight-escape-sequences
    :ensure t
    :config
    (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
    (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))
#+END_SRC

*** Themes
Fire up the mood lighting
**** bliss
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package bliss-theme
    :ensure t
    :config (load-theme 'bliss t))

  (mapcar (lambda (data) (set-face-attribute (car data) nil
                                        :underline  nil
                                        :foreground 'unspecified
                                        :background (cadr data)))
          '((highlight "#333")
            (region    "#444")))
#+END_SRC
**** darkokai
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package darkokai-theme
    :ensure t
    :config (setq darkokai-mode-line-padding 1))
#+END_SRC

And the inverse, for those high-contrast days
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package anti-darkokai
    :quelpa
    (anti-darkokai :fetcher github
                   :repo "ericcrosson/anti-darkokai"))
#+END_SRC
**** nimbus & nord combo
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package nimbus-theme
    :ensure t
    :config (load-theme 'nimbus t))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package nord-theme
    :ensure t
    :pin melpa-stable
    :config
    (load-theme 'nord t)
    ; (set-face-foreground 'font-lock-comment-face "#b3daff")
    (set-face-foreground 'font-lock-comment-face "#7C7C7C")
    (set-face-foreground 'font-lock-doc-face "#B4C4C8")

    (custom-set-faces
     '(flyspell-duplicate ((t (:underline "DarkOrange"))))
     '(flyspell-incorrect ((t (:underline "Red1"))))))
#+END_SRC
**** Tronesque
To use this theme, I would need to increase the contrast of the
mode-line in non-selected windows.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package tronesque-theme
    :quelpa (tronesque-theme
             :fetcher github
             :repo "esc-emacs/tronesque-theme"))
#+END_SRC

**** Doom themes
This one was changed out from under me! I like the one from 2019 ish,
try to find that if you can't find a good fit elsewhere.
#+BEGIN_SRC emacs-lisp no
  (use-package doom-themes
    :ensure t
    :pin melpa-stable
    :config (load-theme 'doom-city-lights t))
#+END_SRC

**** Night owl theme
#+BEGIN_SRC emacs-lisp
    (use-package night-owl-theme
      :ensure t
      :pin melpa-stable
      :config (load-theme 'night-owl t)

      (setq fci-rule-color "#637777")

      (custom-set-faces
       '(default ((t (:background nil))))
       '(git-gutter+-modified ((t (:inherit bold :foreground "#82AAFF" :background nil))))
       '(git-gutter+-added ((t (:inherit bold :foreground "#C792EA" :background nil))))
       '(git-gutter+-deleted ((t (:inherit bold :foreground "#F78C6C" :background nil))))
       ;; TODO: preserve syntax highlighting
       '(swiper-line-face ((t (:background "#C792EA" :foreground "white"))))
       '(font-lock-variable-name-face ((t (:foreground "#87DBFA"))))))
#+END_SRC

**** Notes
Also interesting
| Dark theme | Light theme |
|------------+-------------|
| spacegray  | snowish     |
| obsidian   |             |

**** theme-manager
#+BEGIN_SRC emacs-lisp
  (use-package theme-manager
    :quelpa (theme-manager
             :fetcher github
             :repo "EricCrosson/theme-manager"))
#+END_SRC
*** OS X Customization
TODO: wrap in osx specific block, if keeping

This block avoids the system title-bar and uses a title-bar in
accordance with the current emacs theme
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))
#+END_SRC

Run this block (and restart emacs) to undo changes caused by the above
block. More info [[https://github.com/d12frosted/homebrew-emacs-plus/issues/55#issuecomment-723562674][here]].
#+begin_src emacs-lisp :tangle no
  (add-to-list 'frameset-filter-alist '(ns-transparent-titlebar . :never))
  (add-to-list 'frameset-filter-alist '(ns-appearance . :never))
#+end_src

*** all-the-icons
To install icons, run `M-x all-the-icons-install-fonts`
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Cursor config
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

*** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src
** Macros
I took the macro below from [[http://milkbox.net/note/single-file-master-emacs-configuration/][milkypostman]]. His article is really worth
a read; stop what you're doing and go take a look if you haven't.
#+BEGIN_SRC emacs-lisp
  (defmacro after (mode &rest body)
    "`eval-after-load' MODE evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,mode
       '(progn ,@body)))
#+END_SRC

** Functions
Anything I end up doing more than three times...
#+BEGIN_SRC emacs-lisp
  (defun insert-program-header ()
    "Insert the user's name and the current date at point."
    (interactive)
    (insert "Written by " user-full-name)
    (open-line 1)
    (comment-line 1)
    (esc-insert-short-date)
    (comment-line 1))
#+END_SRC

** Aliases
I did not grow up in an era where this is a straightforward mnemonic
#+BEGIN_SRC emacs-lisp
  (defalias 'undefun 'fmakunbound)
#+END_SRC

** Behavioral modifications
#+BEGIN_SRC emacs-lisp
  (setq-default
   frame-title-format '("emacs@" system-name ":%f") ;include path of frame
   ;; frame-title-format ""
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (put 'overwrite-mode 'disabled t)            ; There shall be no 'insert'
  (fset 'yes-or-no-p 'y-or-n-p)                ; change yes-no to y-n
  (setq ;debug-on-error t
        gc-cons-threshold 100000000
        read-process-output-max (* 1024 1024)  ; 1 MB
        inhibit-startup-screen t
        ring-bell-function 'ignore             ; turn off alarms completely
        disabled-command-function 'beep        ; alert me when accessing disabled funcs
        redisplay-dont-pause t                 ; don't pause refreshes
        display-time-load-average-threshold 0.6
        dabbrev-case-replace nil
        display-buffer-reuse-frames t          ; raise buffers, not spawn
        remote-file-name-inhibit-cache t       ; don't resolve remote file attrubutes
        auto-save-default nil
        large-file-warning-threshold nil
        save-interprogram-paste-before-kill t
        set-mark-command-repeat-pop t
        starttls-use-gnutls t
        vc-follow-symlinks t
        browse-url-browser-function 'browse-web
        kill-buffer-query-functions (remq 'process-kill-buffer-query-function
                                           kill-buffer-query-functions))
#+END_SRC

Now everybody agrees that the =*Minibuffer*= prompt is uneditable
#+BEGIN_SRC emacs-lisp
  (setq minibuffer-prompt-properties '(read-only t point-entered
                                                 minibuffer-avoid-prompt face
                                                 minibuffer-prompt))
#+END_SRC

These settings keep the text soup that is GNU/Linux as happy as
GNU/Linux files can be
#+NAME: char-and-font-encoding
#+BEGIN_SRC emacs-lisp
  ;; Char and font encoding
  (set-buffer-file-coding-system 'unix)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq c-default-style "linux"
        c-basic-offset 4
        require-final-newline 'visit-save ;compliance
        comment-style 'indent)
#+END_SRC

It is my belief that backup files should not be so obtrusive as to
tempt users to disable them
#+NAME: stash-backups
#+BEGIN_SRC emacs-lisp
  (push `("." . ,(concat esc-meta-directory "backups/")) backup-directory-alist)
#+END_SRC

=i-search= is capable of spanning whitespace regions
#+BEGIN_SRC emacs-lisp
  (setq search-whitespace-regexp "[ \t\r\n]+")
#+END_SRC

Share the Xorg clipboard and insert at point, not at the middle-click
location
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t
        mouse-yank-at-point t)
#+END_SRC

** Core
*** Libraries
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t
    ;;:pin melpa-stable
    :config (put '--each 'lisp-indent-function 1))
#+END_SRC

*** Org mode config

TODO: add current clocked-in task to modeline

#+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   (add-hook 'org-mode-hook 'org-indent-mode)
   (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (after 'evil-leader
    (evil-leader/set-key-for-mode 'org-mode
      ;;; narrow commands
      "ns" 'org-narrow-to-subtree
      "nw" 'widen
      ;;; time clocking commands
      "cd" 'org-clock-display
      ))
#+END_SRC

**** Org tempo config
For Easy Templates
#+BEGIN_SRC emacs-lisp
  (after 'org (require 'org-tempo))
#+END_SRC

**** Org gtd config
#+BEGIN_SRC emacs-lisp
  (after 'org
    (setq org-todo-keywords
          '((sequence "TODO(t!/@)" "HOLD(h@)" "NEXT(n!)" "INPROG(i!)"
                      "WAITING(w@)" "REVIEW(r@)" "|"
                      "DONE(d@)" "CANCELLED(c@)")
            (sequence "|" "PLAN(p!)" "MEETING(m!)")
            (sequence "PROJECT(r!)" "|" "DONE(d@)" "CANCELLED(c@)")))
    (setq org-todo-keyword-faces
          '(("TODO" :foreground "red" :weight bold)
            ("REVIEW" :foreground "orange" :weight bold)
            ("NEXT" :foreground "orange" :weight bold)
            ("INPROG" :foreground "orange" :weight bold)
            ("HOLD" :foreground "orange" :weight bold)
            ("WAITING" :foreground "orange" :weight bold)
            ("DONE" org-done)
            ("CANCELLED" org-done)
            ("PROJECT" :foreground "purple" :weight bold)
            ("PLAN" :foreground "purple" :weight bold)
            ("MEETING" :foreground "blue" :weight bold))))
#+END_SRC

**** Org babel config
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
#+END_SRC

**** Org cliplink config
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :ensure t
    :bind ("C-c l" . org-cliplink))
#+END_SRC

**** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :pin melpa-stable
    :hook (org-mode . org-bullets-mode)
    :config
    (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "◆" "◇")))
#+END_SRC

**** Org toc config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package toc-org
    :ensure t
    :pin melpa-stable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

*** Dired config
;; TODO: define these functions
;; (use-package wdired
;;   :config
;;   (define-key wdired-mode-map
;;     (vector 'remap 'beginning-of-line) 'esc/dired-back-to-start-of-files)
;;   (define-key wdired-mode-map
;;     (vector 'remap 'esc/back-to-indentation-or-beginning)
;;     'esc/dired-back-to-start-of-files)
;;   (define-key wdired-mode-map
;;     (vector 'remap 'beginning-of-buffer) 'esc/dired-back-to-top)
;;   (define-key wdired-mode-map
;;     (vector 'remap 'end-of-buffer) 'esc/dired-jump-to-bottom))

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setq dired-listing-switches "-Alhv"
          dired-free-space-args "-Ph"
          diredp-hide-details-initially-flag t
          dired-recursive-copies 'always
          dired-recursive-deletes 'always
          dired-dwim-target t)
    ;; Reload dired after making changes
    (--each '(dired-do-rename
              dired-create-directory
              wdired-abort-changes)
      (eval `(defadvice ,it (after revert-buffer activate)
               (revert-buffer))))

    (after 'ibuf-ext
      (add-to-list 'ibuffer-saved-filter-groups
                   '("default" ("dired" (mode . dired-mode)))))

    ;; TODO: move this somewhere it belongs
    ;; Allow running multiple async commands simultaneously
    (defadvice shell-command (after shell-in-new-buffer
                               (command &optional output-buffer error-buffer))
      (when (get-buffer "*Async Shell Command*")
        (with-current-buffer "*Async Shell Command*" (rename-uniquely))))
    (ad-activate 'shell-command)
    )
#+END_SRC

**** dired-details
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dired-details
    :ensure t
    :after (dash dired)
    :config (dired-details-install))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package dired-details
    :quelpa (dired-details
             :fetcher github
             :repo "emacsmirror/dired-details")
    :after (dash dired)
    :config (dired-details-install))
#+END_SRC

**** dired-x
#+BEGIN_SRC emacs-lisp
  (use-package dired-x
    :after (dired)
    :init (setq dired-omit-verbose nil)
    :config
    (setq-default dired-omit-files-p t)
    (setq dired-omit-files
          (concat dired-omit-files
                  "\\|\\.pyc$"
                  "\\|\\.elc$"
                  "\\|\\.~undo-tree~\\.gz$"
                  "\\|\\.projectile$"
                  "\\|\\.DS_Store$")
          dired-guess-shell-alist-user
          '(("\\.mp4$" "cvlc" "mplayer")
            ("\\.avi$" "cvlc" "mplayer")
            ("\\.mkv$" "cvlc" "mplayer")
            ;; ("\\.pdf$" "evince" "zathura")
            ("\\.tar.bz2" "dtrx -n --one=here" "tar jxvf")
            ("\\.tar.gz" "dtrx -n --one=here" "tar xzvf")
            ("\\.rar" "dtrx -n --one=here" "unrar e")
            ("\\.zip" "dtrx -n --one=here")
            ;; ("\\.*$" "xdg-open")
            ("\\.*$" "open"))))
#+END_SRC

**** dired-aux
#+BEGIN_SRC emacs-lisp
  (use-package dired-aux
    :after (dired)
    :config (add-to-list 'dired-compress-file-suffixes '("\\.zip$" "unzip")))
#+END_SRC

**** dired-smart-jump
#+BEGIN_SRC emacs-lisp
  (use-package dired-smart-jump
    :quelpa (dired-smart-jump
             :fetcher github
             :repo "ericcrosson/dired-smart-jump")
    :after (dired))
#+END_SRC

**** dired-here
#+BEGIN_SRC emacs-lisp
  (use-package dired-here
    :quelpa (dired-here
             :fetcher github
             :repo "EricCrosson/dired-here")
    :after (dired evil-leader)
    :config (evil-leader/set-key "d" 'dired-here))
#+END_SRC

**** dired-arrow-keys
#+BEGIN_SRC emacs-lisp
  (use-package dired-arrow-keys
    :quelpa (dired-arrow-keys
             :fetcher github
             :repo "EricCrosson/dired-arrow-keys")
    :after (dired evil)
    :config (dired-arrow-keys-install))
#+END_SRC

*** Shell config
There's no reason to query you about your favorite shell with every
new terminal.
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name
        (if (file-exists-p "/usr/bin/zsh")
            "/usr/bin/zsh"
          "/bin/bash"))
#+END_SRC

*** auto-revert-mode config
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :diminish
    :hook (dired-mode . auto-revert-mode)
    :config (global-auto-revert-mode 1))
#+END_SRC

*** eldoc config
#+BEGIN_SRC emacs-lisp
  (use-package eldoc :diminish)
#+END_SRC

*** Minibuffer config
#+BEGIN_SRC emacs-lisp
  (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
#+END_SRC

*** Time clocking config...
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC

*** Mouse avoidance config
#+BEGIN_SRC emacs-lisp
  (mouse-avoidance-mode 'exile)
#+END_SRC

*** Compilation config
#+BEGIN_SRC emacs-lisp
  (bind-key "C-c m" 'compile)
#+END_SRC

*** Buffer config
#+BEGIN_SRC emacs-lisp
  (bind-key "C-x M-b" 'bury-buffer)
#+END_SRC

*** Version control config
#+begin_src emacs-lisp
  (bind-key "C-x v c" 'vc-resolve-conflicts)
#+end_src

** Language configs
*** editorconfig config
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :pin melpa-stable
    :config
    (editorconfig-mode 1))
#+end_src

*** LSP mode config
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :pin melpa
    :after (evil-leader)
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-file-watch-threshold 10000
          lsp-prefer-capf t
          lsp-log-io nil)
    :config
    (evil-leader/set-key-for-mode 'lsp-mode
      "fl" 'lsp-format-buffer)
    :custom
    (lsp-headerline-breadcrumb-enable nil))
#+END_SRC

**** LSP UI config
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :pin melpa
    :after (lsp-mode evil-leader)
    :init
    (setq lsp-ui-doc-enable nil
          lsp-ui-peek-enable t
          lsp-ui-sideline-enable t
          lsp-ui-imenu-enable t
          lsp-ui-flycheck-enable t)
    (evil-leader/set-key
      "lr" 'lsp-ui-peek-find-references
      "ld" 'lsp-ui-peek-find-definitions
      "li" 'lsp-ui-peek-find-implementation))
#+END_SRC

**** lsp-ivy config
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :pin melpa
    :after (lsp-mode ivy evil-leader)
    :config
    (evil-leader/set-key
      "ls" 'lsp-ivy-workspace-symbol))
#+end_src

*** DAP mode config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dap-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Programming modes config
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
#+END_SRC

**** Stickyfunc config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package stickyfunc-enhance
    :ensure t
    :init (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode))
#+END_SRC

**** fci-mode config
We must always remember [[http://programmers.stackexchange.com/a/148678][our origins]]
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :pin melpa-stable
    :config (add-hook 'prog-mode-hook 'fci-mode))
#+END_SRC

**** Aggressive indent config
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :pin melpa-stable
    :config
    (defun turn-off-aggressive-indent-mode ()
      "Turn off `aggressive-indent-mode'."
      (interactive)
      (aggressive-indent-mode -1))
    (remove-hook 'markdown-mode-hook 'turn-off-aggressive-indent-mode))
#+END_SRC

**** Rainbow-mode
Turn off `rainbow-mode` in `c-mode-common-hook` as it will highlight
the first half of `#define`.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (defun turn-on-rainbow-mode()
      "Turn on `rainbow-mode`."
      (interactive)
      (rainbow-mode 1))
    (defun turn-off-rainbow-mode()
      "Turn off `rainbow-mode`."
      (interactive)
      (rainbow-mode -1))
    (add-hook 'prog-mode-hook 'turn-on-rainbow-mode)
    (add-hook 'c-mode-common-hook 'turn-off-rainbow-mode))
#+END_SRC

**** FIC-mode config
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :ensure t
    :diminish fic-mode
    :config
    (push "ANSWER" fic-highlighted-words)
    (push "CHALLENGE" fic-highlighted-words)
    (push "DEBUG" fic-highlighted-words)
    (push "DISCUSS" fic-highlighted-words)
    (push "DOCUMENT" fic-highlighted-words)
    (push "DONE" fic-highlighted-words)
    (push "ERIC" fic-highlighted-words)
    (push "FEATURE" fic-highlighted-words)
    (push "HACK" fic-highlighted-words)
    (push "LIMITATION" fic-highlighted-words)
    (push "NEXT" fic-highlighted-words)
    (push "NOTE" fic-highlighted-words)
    (push "REFACTOR" fic-highlighted-words)
    (push "RENAME" fic-highlighted-words)
    (push "RESUME" fic-highlighted-words)
    (push "SMELL" fic-highlighted-words)
    (push "TEST" fic-highlighted-words)
    (push "TICKET" fic-highlighted-words)
    (push "TYPE" fic-highlighted-words)
    (defun turn-off-fic-mode ()
       "Turn fic-mode off."
       (interactive)
       (fic-mode -1))
    (defun turn-on-fic-mode ()
       "Turn fic-mode on."
       (interactive)
       (fic-mode 1))
    (add-hook 'conf-mode-hook 'turn-on-fic-mode)
    (add-hook 'prog-mode-hook 'turn-on-fic-mode))
#+END_SRC

*** LISP modes config
**** show-paren mode
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config (show-paren-mode t))
#+END_SRC

**** Paredit
#+BEGIN_SRC emacs-lisp :tangle no
  ;; TODO: resume
  (use-package paredit
    :after (eldoc)
    :quelpa (paredit
             :fetcher github
             :repo "esc-emacs/paredit")
    :config
    (eldoc-add-command
     'paredit-backward-delete
     'paredit-close-round)

    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
#+END_SRC

**** Paxedit
#+BEGIN_SRC emacs-lisp
  (use-package paxedit
    :ensure t
    :pin melpa-stable
    :after (paredit)
    :hook ((emacs-lisp-mode . paxedit-mode)
           (clojure-mode . paxedit-mode))
    :config (setf paxedit-alignment-cleanup nil))
#+END_SRC

**** Clojure config
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'clojure-mode-hook 'electric-pair-local-mode)
    ;; TODO: allow fic-mode to parse docstrings
    (add-hook 'clojure-mode-hook 'turn-on-fic-mode))
#+END_SRC

***** CIDER
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package cider
    :ensure t
    :pin melpa
    :after (clojure-mode))
#+END_SRC

*** C modes config
**** Rtags config
#+BEGIN_SRC emacs-lisp
  (use-package rtags
    :ensure t
    :pin melpa-stable
    :bind ("C-;" . rtags-find-symbol-at-point))
#+END_SRC

**** Qt config
#+BEGIN_SRC emacs-lisp
  (use-package qt-pro-mode
    :ensure t
    :pin melpa-stable
    :mode ("\\.pro\\'" "\\.pri\\'"))
#+END_SRC

**** S-refactor config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package srefactor
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (semantic-mode 1)
    (evil-leader/set-key-for-mode 'c++-mode
      "rh" 'srefactor-refactor-at-point))
#+END_SRC

*** Rust config
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :pin melpa
    :after (lsp-mode lsp-ui)
    :hook ((rust-mode . lsp-deferred))
    :bind (:map rust-mode-map
           ("C-c C-n" . lsp-rename))
    :config
    ;; TODO: this isn't rust-specific, it's the exact same code for golang.
    ;; Pull this out into the lsp configs somewhere... not sure where yet.
    (defun esc/configure-rust-mode ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t)
      (setq-local company-idle-delay 0)
      (setq-local company-minimum-prefix-length 1)
      (setq-local lsp-idle-delay 0.25))
    (add-hook 'rust-mode-hook 'esc/configure-rust-mode))
#+END_SRC

*** Company mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :pin melpa-stable
    :defer
    :config
    (setq lsp-eldoc-render-all t)
    (global-company-mode 1))
#+END_SRC

**** Company LSP config
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :ensure t
  :pin melpa
  :after (company lsp-mode)
  :commands (company-lsp))
#+END_SRC

*** Python config
#+BEGIN_SRC emacs-lisp
  (setq python-indent 4
        python-enable-yapf-format-on-save nil)
#+END_SRC

**** coconut config
#+BEGIN_SRC emacs-lisp
  (use-package coconut-mode
    :quelpa (coconut-mode
             :fetcher github
             :repo "esc-emacs/coconut-mode"))
#+END_SRC

**** anaconda mode
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :defer t
    :pin melpa-stable
    :hook python-mode
    :init
    (setq anaconda-mode-installation-directory
          (expand-file-name "anaconda-mode" esc-meta-directory))
    :config
    (defadvice anaconda-mode-goto (before python/anaconda-mode-goto activate)
      (evil--jumps-push)))
#+END_SRC

**** company-anaconda
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :after (company anaconda-mode)
    :pin melpa-stable
    :defer t
    :init (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

**** yapf
#+BEGIN_SRC emacs-lisp
  (use-package py-yapf
    :ensure t
    :pin melpa-stable
    ;; FIXME: have something this cool
    ;; :init
    ;; (spacemacs/set-leader-keys-for-major-mode 'python-mode "=" 'py-yapf-buffer)
    :config
    (when python-enable-yapf-format-on-save
      (add-hook 'python-mode-hook 'py-yapf-enable-on-save)))
#+END_SRC
*** Coffeescript config
#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** C mode config
Define additional common search-paths for headers/source files.

#+BEGIN_SRC emacs-lisp
  (defun esc-customize-cc-search-directories ()
    (add-to-list 'cc-search-directories '"../inc")
    (add-to-list 'cc-search-directories '"../src"))
  (add-hook 'cc-mode-hook 'esc-customize-cc-search-directories)
#+END_SRC

Always open associated header/source files in a separate window.

#+BEGIN_SRC emacs-lisp
  (setq-default ff-always-in-other-window t)
#+END_SRC

**** Irony config
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :pin melpa-stable
    :hook (c++-mode c-mode)
    :config
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point] 'counsel-irony)
      (define-key irony-mode-map [remap complete-symbol] 'counsel-irony))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

*** Java config
#+begin_src emacs-lisp
  (use-package gradle-mode
    :ensure t
    :pin melpa-stable)
#+end_src

*** Stratos config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.fl\\'" . ruby-mode))
#+END_SRC

*** Shell-mode config
Mark scripts executable on save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

Use lsp-mode
#+BEGIN_SRC emacs-lisp
  (defun esc/config-sh-mode ()
    (lsp-ui-mode 1)
    (lsp-ui-doc-mode 1)
    (bind-key (kbd "C-c C-n") 'lsp-rename sh-mode-map)
    (setq-local company-idle-delay 0)
    (setq-local company-minimum-prefix-length 1)
    (setq-local lsp-idle-delay 0.25)
    (setq-local lsp-ui-sideline-show-code-actions nil))
  (add-hook 'sh-mode-hook 'esc/config-sh-mode)
#+END_SRC

*** Markdown config
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :after (fic-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("readme\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :hook ((markdown-mode . auto-fill-mode)
           (markdown-mode . flyspell-mode)))
#+END_SRC

*** JavaScript config
#+begin_src emacs-lisp
  (use-package js
    :after (evil evil-leader lsp-mode lsp-ui)
    :hook ((js-mode . lsp-deferred))
    :bind (:map js-mode-map
                ("C-c C-n" . lsp-rename))
    :config
    ;; TODO: what is the mode name for this?
    ;; (evil-leader/set-key-for-mode javascript-mode
    ;;   "fp" 'js-find-package-json)
    (defun esc/config-javascript-mode ()
      (define-key js-mode-map (vector 'remap 'fill-paragraph) 'javascript-c-fill-paragraph)
                                          ; (add-hook 'before-save-hook #'lsp-format-buffer t t) ;; one day, sweet prince
                                          ; (add-hook 'before-save-hook #'lsp-organize-imports t t) ;; one day, sweet prince
      (setq-local company-idle-delay 0)
      (setq-local company-minimum-prefix-length 1)
      (setq-local lsp-idle-delay 0.25)
      (setq-local lsp-ui-sideline-show-code-actions nil)
      ;; configure 2-space indent
      (make-local-variable 'js-indent-level)
      (setq js-indent-level 2))
    (add-hook 'javascript-mode-hook 'esc/config-javascript-mode))
#+end_src

**** find-package-json
TODO pull this into its own package
TODO: add this to javascript-mode proper (not ts mode, that's already done)
#+begin_src emacs-lisp
  (defun js-find-package-json ()
    "Switch to the nearest package.json file above current file.
     If already viewing a package.json file, run `bury-buffer'."
    (interactive)
    (if buffer-file-name
        (if (string-equal "package.json" (file-name-nondirectory buffer-file-name))
            (bury-buffer)
          (let ((manifest (format "%s/package.json"
                                  (locate-dominating-file "." "package.json"))))
            (when manifest
              (find-file manifest))))
      (message "find-package-json error: not currently visiting a file")))
#+end_src

**** run-prettier-fix
#+begin_src emacs-lisp
  (defun js-run-prettier-fix ()
    "Run `prettier --fix` on the current file."
    (interactive)
    (shell-command (format "npx --no-install prettier --write %s" (buffer-file-name))))
#+end_src

**** run-eslint-fix
#+begin_src emacs-lisp
  (defun js-run-eslint-fix ()
    "Run `eslint --fix` on the current file."
    (interactive)
    (let ((default-directory (locate-dominating-file "." "tsconfig.json")))
      (shell-command (format "npx --no-install eslint --fix %s" (buffer-file-name)))))
#+end_src

**** run-prettier-and-eslint-fix
#+begin_src emacs-lisp
  (defun js-run-prettier-and-eslint-fix ()
    "Run `prettier --fix` and `eslint --fix` on the current file."
    (interactive)
    (let ((exit-code (js-run-prettier-fix)))
      (when (eq 0 exit-code)
        (js-run-eslint-fix))))
#+end_src

**** prettier config
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t)
#+END_SRC

**** indium config
#+BEGIN_SRC emacs-lisp
  (use-package indium
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** JSON mode config
#+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t
      :pin melpa-stable
      :after (evil-leader)
      :config
        (evil-leader/set-key-for-mode 'json-mode
          "fp" 'js-find-package-json
          "ff" 'js-run-prettier-fix
          "fl" 'js-run-eslint-fix)
        (defun esc/config-json-mode ()
          (make-local-variable 'js-indent-level)
          (setq js-indent-level 2))
        (add-hook 'json-mode-hook 'esc/config-json-mode))
#+END_SRC

*** Jsonnet mode config
#+BEGIN_SRC emacs-lisp
  (use-package jsonnet-mode
    :ensure t
    :pin melpa-stable
    :after (json-mode)
    :config
    (defun esc/jsonnet-mode-hook ()
      (setq-local comment-start "//"))
    (add-hook 'jsonnet-mode-hook 'esc/jsonnet-mode-hook))
#+END_SRC

*** TypeScript config
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :pin melpa
    :after (evil evil-leader lsp-mode lsp-ui)
    :hook ((typescript-mode . lsp-deferred))
    :bind (:map typescript-mode-map
           ("C-c C-n" . lsp-rename))
    :config
    (evil-leader/set-key-for-mode 'typescript-mode
      "fp" 'js-find-package-json
      "ff" 'js-run-prettier-fix
      "fl" 'js-run-eslint-fix)
    (defun esc/config-typescript-mode ()
      (define-key typescript-mode-map (vector 'remap 'fill-paragraph) 'typescript-c-fill-paragraph)
      ; (add-hook 'before-save-hook #'lsp-format-buffer t t) ;; one day, sweet prince
      ; (add-hook 'before-save-hook #'lsp-organize-imports t t) ;; one day, sweet prince
      (setq-local company-idle-delay 0)
      (setq-local company-minimum-prefix-length 1)
      (setq-local lsp-idle-delay 0.25)
      (setq-local lsp-ui-sideline-show-code-actions nil)
      ;; configure 2-space indent
      (make-local-variable 'typescript-indent-level)
      (setq typescript-indent-level 2))
    (add-hook 'typescript-mode-hook 'esc/config-typescript-mode))
#+END_SRC

**** tide config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package tide
    :ensure t
    :pin melpa-stable
    :after (eldoc typescript-mode company flycheck)
    :bind (:map typescript-mode-map
           ("M-." . tide-jump-to-definition)
           ("M-R" . tide-restart-server)
           ("C-c C-n" . tide-rename-symbol)
           ("C-c C-f" . tide-rename-file))
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (typescript-mode . company-mode-on)
           (typescript-mode . turn-on-flycheck-mode)
           (typescript-mode . turn-on-eldoc-mode)
           ;; (before-save . tide-format-before-save)
           )
    :config
    (flycheck-add-mode 'javascript-eslint 'typescript-mode)
    ;; (flycheck-add-next-checker 'typescript-tide 'javascript-eslint 'append)
    (defun tide/configure-tide-typescript ()
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (setq company-backends '(company-tide company-yasnippet))
      (bind-key "TAB" 'yas-expand yas-minor-mode-map)
      (bind-key "M-." nil evil-normal-state-map)
      ;; aligns annotation to the right hand side
      ;; (setq company-tooltip-align-annotations t)
      )
    (add-hook 'typescript-mode-hook 'tide/configure-tide-typescript))
#+END_SRC

**** web-mode config
TODO: add autopair-mode
TODO: add fic-mode
You know what: is this even considered a prog mode?
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :pin melpa-stable
      :mode ("\\.tsx\\'")
      :after (evil evil-leader lsp-mode lsp-ui)
      :hook ((web-mode . lsp-deferred))
      :bind (:map web-mode-map
             ("C-c C-n" . lsp-rename))
      :config
      (evil-leader/set-key-for-mode 'web-mode
        "fp" 'js-find-package-json
        "ff" 'js-run-prettier-fix
        "fl" 'js-run-eslint-fix)
      (defun esc/config-web-mode ()
        (define-key web-mode-map (vector 'remap 'fill-paragraph) 'typescript-c-fill-paragraph)
        ; (add-hook 'before-save-hook #'lsp-format-buffer t t) ;; one day, sweet prince
        ; (add-hook 'before-save-hook #'lsp-organize-imports t t) ;; one day, sweet prince
        (setq-local company-idle-delay 0)
        (setq-local company-minimum-prefix-length 1)
        (setq-local lsp-idle-delay 0.25)
        (setq-local lsp-ui-sideline-show-code-actions nil))
      (add-hook 'web-mode-hook 'esc/config-web-mode))
#+END_SRC
**** ts-comint
Wasn't working :\
Install dependencies: `npm i -g tsun`
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ts-comint :ensure t)
#+END_SRC

*** PureScript config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package purescript-mode
    :ensure t
    :config
    (add-hook 'purescript-mode-hook 'turn-on-purescript-decl-scan))
#+END_SRC

**** psc-ide-emacs
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package psc-ide
    :ensure t
    :after (purescript-mode)
    :config
      (defun purescript-mode/configure-purescript-mode ()
        (psc-ide-mode)
        (company-mode)
        (flycheck-mode)
        (turn-on-purescript-indentation)
        )
      (add-hook 'purescript-mode-hook 'purescript-mode/configure-purescript-mode))
#+END_SRC

**** psci-mode
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package psci
    :ensure t
    :pin melpa-stable
    :after (purescript-mode)
    :config
    (add-hook 'purescript-mode-hook 'inferior-psci-mode)
    )
#+END_SRC

*** Golang mode config
**** go-mode config
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :pin melpa-stable
    :after (evil lsp-mode)
    :hook ((go-mode . lsp-deferred))
    :bind (:map go-mode-map
           ("C-c C-n" . lsp-rename))
    :config
    (setq lsp-gopls-staticcheck t
          lsp-gopls-complete-unimported t)
    (defun esc/configure-go-mode ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t)
      (setq-local company-idle-delay 0)
      (setq-local company-minimum-prefix-length 1)
      (setq-local lsp-idle-delay 0.25))
    (add-hook 'go-mode-hook 'esc/configure-go-mode))
#+END_SRC

**** go-eldoc
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package go-eldoc
    :ensure t
    :pin melpa-stable
    :after (eldoc go-mode)
    :hook ((go-mode . turn-on-eldoc-mode)
           (go-mode . go-eldoc-setup)))
#+END_SRC

*** Lua mode config
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package lua-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Yasnippet config
TODO: use from melpa stable)
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :load-path "~/.emacs.d/plugins/yasnippet"
    ;; :pin melpa-stable
    :config
    (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC

*** RestructuredText config
#+BEGIN_SRC emacs-lisp
  (use-package rst
    :ensure t
    :config (add-hook 'rst-mode-hook 'auto-fill-mode))
#+END_SRC

*** Yaml mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :pin melpa-stable
    :after (fic-mode)
    :mode (("\\.yml$" . yaml-mode))
    :config (add-hook 'yaml-mode-hook 'turn-on-fic-mode))
#+END_SRC

*** Graphviz Dot mode
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package graphviz-dot-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Bitbake config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.bb\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.bbappend\\'" . conf-mode))
#+END_SRC

*** Docker config
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :pin melpa)
  (add-to-list 'auto-mode-alist '("\\.env\\'" . conf-mode))
#+END_SRC

***** docker-compose mode
#+BEGIN_SRC emacs-lisp
    (use-package docker-compose-mode
      :ensure t
      :pin melpa-stable
      :mode ("docker-compose[^/]*\\.yaml\\'"))
#+END_SRC

*** bats config
#+BEGIN_SRC emacs-lisp
  (use-package bats-mode
    :ensure t
    :interpreter ("bats" . bats-mode))
#+END_SRC

*** Qml mode config
#+BEGIN_SRC emacs-lisp
  (use-package qml-mode
    :ensure t
    :pin melpa-stable
    :config (add-to-list 'auto-mode-alist '("\\.qml$" . qml-mode)))

  (use-package company-qml
    :ensure t
    :after (company qml-mode)
    :config (add-to-list 'company-backends 'company-qml))
#+END_SRC

*** Pine script
#+BEGIN_SRC emacs-lisp
  (use-package pine-script-mode
    :ensure t
    :pin melpa-stable
    :mode (("\\.pine" . pine-script-mode)))
#+END_SRC

*** terraform mode
#+BEGIN_SRC emacs-lisp
  (use-package hcl-mode
    :ensure t
    :pin melpa-stable
    :config (setq hcl-indent-level 4))

  (use-package terraform-mode
    :ensure t
    :pin melpa-stable
    :after (hcl-mode)
    :config (setq terraform-indent-level 4))

  (use-package company-terraform
    :ensure t
    :pin melpa-stable
    :after (terraform-mode company)
    :hook ((terraform-mode . company-terraform-init)))
#+END_SRC

** Extra
*** So-Long mode
#+begin_src emacs-lisp
  (global-so-long-mode 1)
#+end_src

*** vertical-line mode
#+BEGIN_SRC emacs-lisp
  (use-package vline-mode
    :quelpa (vline-mode
             :fetcher github
             :repo "EricCrosson/vline-mode")
    :defer t
    :bind ("C-c v" . vline-mode))
#+END_SRC

*** OpenAPI config
#+BEGIN_SRC emacs-lisp
  (use-package openapi-yaml-mode
    :after (yaml-mode)
    :quelpa (openapi-yaml-mode
             :fetcher github
             :repo "esc-emacs/openapi-yaml-mode")
    :mode (("\\.openapi.yml" . openapi-yaml-mode)
           ("\\.swagger.yml" . openapi-yaml-mode)
           ("\\.openapi.yaml" . openapi-yaml-mode)
           ("\\.swagger.yaml" . openapi-yaml-mode))
    :hook ((openapi-yaml-mode . electric-pair-local-mode)
           (openapi-yaml-mode . flyspell-mode)))
#+END_SRC
*** Notifications config
#+BEGIN_SRC emacs-lisp
  (use-package notifications
    :commands notifications-notify)
#+END_SRC

*** Red-pen config
#+BEGIN_SRC emacs-lisp
  (use-package redpen-paragraph
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Writeroom mode config
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config (evil-leader/set-key "bw" 'writeroom-mode))
#+END_SRC

*** Writegood mode config
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :ensure t
    :pin melpa-stable
    :after (writeroom-mode)
    :hook ((writeroom-mode . turn-on-writegood-mode))
    :config
    (defun turn-on-writegood-mode ()
      "Turn on `writegood-mode'."
      (writegood-mode 1))
)
#+END_SRC

*** unkillable-scratch config
#+BEGIN_SRC emacs-lisp
  (use-package unkillable-scratch
    :ensure t
    :pin melpa-stable
    :config (unkillable-scratch t))
#+END_SRC
*** smartrep config
#+BEGIN_SRC emacs-lisp
  (use-package smartrep
    :ensure t
    ;; :pin melpa-stable
    )
#+END_SRC

*** kill-term-buffer-on-exit-mode
#+BEGIN_SRC emacs-lisp
  (use-package kill-term-buffer-on-exit-mode
    :quelpa (kill-term-buffer-on-exit-mode
             :fetcher github
             :repo "EricCrosson/kill-term-buffer-on-exit-mode"))
#+END_SRC

*** keycast-mode config
Display each keypress with `keycast-mode`.

TODO: add `mode-line-buffer-identification` to mode line in order for
this package to work.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package keycast
    :ensure t
    :pin melpa-stable
    :bind (("<f6>" . keycast-mode)))
#+END_SRC

*** emacs-gif-screencast
Record one frame per keystroke.
#+BEGIN_SRC emacs-lisp
  (use-package gif-screencast
    :ensure t
    :bind (;;:map gif-screencast-mode-map
                ("<f7>" . gif-screencast)
                ("<f8>" . gif-screencast-stop)
                ("<f9>" . gif-screencast-toggle-pause))
    :config
    ;; Note: this is mac-dependent
    (setq gif-screencast-args '("-x")) ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
    (setq gif-screencast-cropping-program "mogrify") ;; Optional: Used to crop the capture to the Emacs frame.
    (setq gif-screencast-capture-format "ppm") ;; Optional: Required to crop captured images.
    )
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config (evil-leader/set-key
              "jl" 'avy-goto-line
              "jf" 'avy-goto-char))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :pin melpa
    :after (evil-leader)
    :bind ("C-x C-f" . counsel-find-file)
    :config
    (evil-leader/set-key
      "a" 'counsel-rg
      "k" 'counsel-company
      "fr" 'counsel-recentf
      "fd" 'save-buffer
      "jk" 'counsel-imenu
      "ll" 'global-display-line-numbers-mode)
    (setq counsel-find-file-ignore-regexp "package-lock\\.json\\|lerna-debug\\.json")
    (counsel-mode 1))
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :pin melpa
    :after (counsel evil-leader)
    :diminish ivy-mode
    :bind (("M-i" . imenu)
           :map ivy-minibuffer-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line))
    :config
    ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; ignore undo-tree files when switching buffers
    (add-to-list 'ivy-ignore-buffers "\\.~undo-tree~\\.gz")
    ;; number of result lines to display
    (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "")
    ;; no regexp by default
    (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine.
    (setq ivy-re-builders-alist
          ;; allow input not in order
          '((t   . ivy--regex-ignore-order)))
    (evil-leader/set-key
      "ss" 'swiper
      "bb" 'ivy-switch-buffer)
    (ivy-mode 1))
#+END_SRC

*** Which-key mode
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :pin melpa-stable
    :diminish which-key-mode
    :init (which-key-setup-side-window-right-bottom)
    :config (which-key-mode 1))
#+END_SRC

*** Avoid accidental termination mode
#+BEGIN_SRC emacs-lisp
  (use-package avoid-accidental-termination-mode
    :quelpa (avoid-accidental-termination-mode
             :fetcher github
             :repo "EricCrosson/avoid-accidental-termination-mode")
    :after (evil-leader)
    :config
    (evil-leader/set-key
      "qq" 'kill-emacs
      "qQ" 'save-buffers-kill-terminal)
    (global-unset-key (kbd "s-q")))
#+END_SRC

*** Terminal Here
#+begin_src emacs-lisp
  (use-package terminal-here
    :pin melpa-stable
    :ensure t
    :defer t
    :config (setq terminal-here-terminal-command (list user-preferred-terminal)))
#+end_src
*** Paradox
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :pin melpa-stable
    :config (paradox-enable))
#+END_SRC

*** Unselectable-window mode
#+BEGIN_SRC emacs-lisp
  (use-package unselectable-window-mode
    :quelpa (unselectable-window-mode
             :fetcher github
             :repo "EricCrosson/unselectable-window-mode")
    :bind ("C-c w" . unselectable-window-mode))
#+END_SRC
*** Evil config
#+BEGIN_SRC emacs-lisp
;;; evil configuration
(use-package evil
  :ensure t
  :pin melpa
  :init (setq evil-want-C-u-scroll t)
  :config
    (define-key evil-normal-state-map (kbd "M-.") nil)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    ;; (define-key evil-normal-state-map (kbd "C-u") 'universal-argument)
    (evil-mode 1))
#+END_SRC

**** vi-tilde-fringe
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package vi-tilde-fringe
    :ensure t
    :config (global-vi-tilde-fringe-mode))
#+END_SRC

**** evil-visualstar
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :ensure t
    :pin melpa-stable
    :after (evil)
    :commands (evil-visualstar/begin-search-forward
               evil-visualstar/begin-search-backward)
    :init
    (define-key evil-visual-state-map (kbd "*") 'evil-visualstar/begin-search-forward)
    (define-key evil-visual-state-map (kbd "#") 'evil-visualstar/begin-search-backward))
#+END_SRC

**** evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :pin melpa-stable
    :after (evil evil-leader)
    :config (evil-commentary-mode 1)
    (evil-leader/set-key ";" 'evil-commentary))
#+END_SRC

**** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :pin melpa-stable
    :after (evil)
    :init
    ;; TODO: autoload these defuns
    (defun esc-insert-long-date ()
      "Insert date at point in human-readable format, e.g. Tuesday
    October 18, 2016."
      (interactive)
      (insert (format-time-string "%A %B %d, %Y")))

    (defun esc-insert-short-date ()
      "Insert date at point in YYYY-MM-DD format."
      (interactive)
      (insert (format-time-string "%Y-%m-%d")))

    (defun esc-insert-timestamp ()
      "Insert timestamp at point in YYYY-MM-DD|HH:MM (UTC time)"
      (interactive)
      (insert (format-time-string "%Y-%m-%d|%H:%M" nil t)))

    :config
    (setq evil-leader/leader "<SPC>")
    (setq evil-leader/no-prefix-mode-rx '("dired-mode"
                                          "magit-.*-mode"))
    (evil-leader/set-key

      ;; stock emacs functions
      "y" 'execute-extended-command
      "sl" 'sort-lines

      ;; file commands
      "fo" 'ff-find-other-file
      ;; TODO: cull unnecessary entries from recentf list (machine files)

      ;; buffer commands
      "bd" 'kill-current-buffer
      "bu" 'bury-buffer

      ;; compilation
      "cm" 'recompile
      "cM" 'compile

      ;;; time-clocking
      "co" 'org-clock-out
      "ci" 'org-clock-in
      "cl" 'org-clock-in-last
      "cq" 'org-clock-cancel

      ;;; insertion commands
      "id" 'esc-insert-short-date
      "iD" 'esc-insert-long-date
      "it" 'esc-insert-timestamp
      )
    (global-evil-leader-mode 1))
#+END_SRC

**** evil-magit
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil-magit
    :ensure t
    ;; :pin melpa-stable
    :after (evil)
    :config (add-hook 'git-commit-mode-hook 'evil-insert-state))
#+END_SRC

**** evil-escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :pin melpa-stable
    :after (evil)
    :diminish evil-escape-mode
    :config (setq-default evil-escape-key-sequence "fd")
            (evil-escape-mode 1))
#+END_SRC

**** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :pin melpa-stable
    :after (evil)
    :config (global-evil-surround-mode 1))
#+END_SRC

**** evil-args
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :ensure t
    :pin melpa-stable
    :after (evil)
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)

    ;; bind evil-jump-out-args
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))
#+END_SRC

**** evil-matchit
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :pin melpa-stable
    :after (evil)
    :config (global-evil-matchit-mode 1))
#+END_SRC

**** evil-lion
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :ensure t
    :after (evil)
    :config (evil-lion-mode))
#+END_SRC

**** evil-multiple-cursors
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil-mc
    :ensure t
    :pin melpa-stable
    :after (evil)
    :config (global-evil-mc-mode 1))
#+END_SRC

**** evil-numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t
    :pin melpa-stable
    :after (evil)
    :bind (("C-c +" . evil-numbers/inc-at-pt)
           ("C-c -" . evil-numbers/dec-at-pt)))
#+END_SRC

**** evil-snipe
#+begin_src emacs-lisp :tangle no
  (use-package evil-snipe
    :ensure t
    :pin melpa-stable
    :config
    (evil-snipe-mode nil)
    (evil-snipe-override-mode t)
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
    ;; FIXME: this is not idempotent
    (push '(?\[ "[[{(]") evil-snipe-aliases)
    (push '(?\] "[]})]") evil-snipe-aliases)
)
#+end_src

**** evil-indent-plus
#+begin_src emacs-lisp
  (use-package evil-indent-plus
    :ensure t
    :pin melpa
    :config
    (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-a-indent)
    (define-key evil-inner-text-objects-map "k" 'evil-indent-plus-a-indent-up)
    (define-key evil-inner-text-objects-map "j" 'evil-indent-plus-a-indent-up-down))
#+end_src

*** Git config
**** Git modes
#+BEGIN_SRC emacs-lisp
  (use-package gitignore-mode
    :ensure t
    :pin melpa-stable)

  (use-package gitconfig-mode
    :ensure t
    :pin melpa-stable)
#+END_SRC

**** git link config
#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (evil-leader/set-key
       "gl" 'git-link)
    (setq git-link-use-commit t))
#+END_SRC

**** Git time machine config
[[http://blog.binchen.org/posts/use-git-timemachine-with-evil.html%0A][Source]]
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (evil-leader/set-key
      "gt" 'git-timemachine-toggle
      "gb" 'git-timemachine-blame)
    (evil-make-overriding-map git-timemachine-mode-map 'normal)
    (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+END_SRC

**** Git-gutter+ config
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (global-git-gutter+-mode 1)
    (evil-leader/set-key
      ;;; jump between hunks
      "gn" 'git-gutter+-next-hunk
      "gp" 'git-gutter+-previous-hunk
      ;;; act on hunks
      "gk" 'git-gutter+-revert-hunks
      ;; stage hunk at point, or all inside region
      "ga" 'git-gutter+-stage-hunks
      "gc" 'git-gutter+-commit
      "gC" 'git-gutter+-stage-and-commit
      "gf" 'git-gutter+-stage-and-commit-whole-buffer
      "gu" 'git-gutter+-unstage-whole-buffer))
#+END_SRC

***** git-gutter+-refresh-on-magit-commit
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-gutter-plus-refresh-on-magit-commit
    :quelpa (git-gutter-plus-refresh-on-magit-commit
             :fetcher github
             :repo "EricCrosson/git-gutter-plus-refresh-on-magit-commit"))
#+END_SRC

**** Magit config
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :diminish magit-auto-revert-mode
    :commands magit-status
    :config (evil-leader/set-key
              "gs" 'magit-status
              "gS" 'magit-clone))
#+END_SRC

**** Magit-todos config
#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :ensure t
    :pin melpa-stable
    :config (magit-todos-mode 1))
#+END_SRC

**** Magithub config
Question: is this necessary in tandem with `forge`?
I am not sure how the two packages relate.
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar magithub-settings-popup "")
  (use-package magithub
    :ensure t
    :pin melpa-stable
    :after (magit)
    :config (magithub-feature-autoinject t))
#+END_SRC

**** Git messenger config
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config (evil-leader/set-key "gm" 'git-messenger:popup-message))
#+END_SRC

**** Magit forge
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package forge
    :ensure t
    :pin melpa-stable
    :after (magit)
    :config (setq auth-sources '("~/.authinfo")))
#+END_SRC

*** Window rotation
#+BEGIN_SRC emacs-lisp
  (use-package rotate
    :ensure t
    :bind (("C-c r w" . rotate-window)
           ("C-c r l" . rotate-layout)))
#+END_SRC

*** Winner config
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :config
    (setq esc/winner-boring-buffers '("*Completions*"
                                      "*Compile-Log*"
                                      "*inferior-lisp*"
                                      "*Fuzzy Completions*"
                                      "*Apropos*"
                                      "*Help*"
                                      "*cvs*"
                                      "*Buffer List*"
                                      "*Ibuffer*"
                                      "*esh command on file*"))
    (setq winner-boring-buffers
          (append winner-boring-buffers esc/winner-boring-buffers))
    (winner-mode 1))
#+END_SRC

*** tail-messages-mode
#+BEGIN_SRC emacs-lisp
  (use-package tail-messages-mode
    :quelpa (tail-messages-mode
             :fetcher github
             :repo "EricCrosson/tail-messages-mode"))
#+END_SRC

*** el-patch config
#+begin_src emacs-lisp
  (use-package el-patch
    :ensure t
    :pin melpa-stable
    :init (setq el-patch-enable-use-package-integration t))
#+end_src

*** Projectile config
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :pin melpa
    :after (counsel evil-leader)
    :config
    ;; disabled in favor of the built-in `project` package
    ;; (setq projectile-enable-caching t)
    (evil-leader/set-key
      "pf" 'project-find-file
      "pd" 'counsel-projectile-find-dir
      "pa" 'counsel-projectile-rg
      "pb" 'counsel-projectile-switch-to-buffer
      "pp" 'counsel-projectile-switch-project
      "pk" 'projectile-kill-buffers
      "ps" 'projectile-save-project-buffers
      "pi" 'projectile-invalidate-cache
      "p%" 'projectile-replace-regexp)
    (add-to-list 'projectile-globally-ignored-files "package-lock.json")
    (counsel-projectile-mode 1))
#+END_SRC

*** Project config

Source [[https://www.manueluberti.eu/emacs/2020/09/18/project/][Manuel Uberti]]

#+begin_src emacs-lisp
  (el-patch-defun project--files-in-directory (dir ignores &optional files)
    (el-patch-remove
      (require 'find-dired)
      (require 'xref)
      (defvar find-name-arg))
    (let* ((default-directory dir)
           ;; Make sure ~/ etc. in local directory name is
           ;; expanded and not left for the shell command
           ;; to interpret.
           (localdir (file-local-name (expand-file-name dir)))
           (command (el-patch-swap
                      (format "%s %s %s -type f %s -print0"
                              find-program
                              localdir
                              (xref--find-ignores-arguments ignores localdir)
                              (if files
                                  (concat (shell-quote-argument "(")
                                          " " find-name-arg " "
                                          (mapconcat
                                           #'shell-quote-argument
                                           (split-string files)
                                           (concat " -o " find-name-arg " "))
                                          " "
                                          (shell-quote-argument ")"))
                                ""))
                      (format "fd -t f -0 . %s" localdir))))
      (project--remote-file-names
       (sort (split-string (shell-command-to-string command) "\0" t)
             #'string<))))
#+end_src

*** Flycheck config
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :pin melpa
  :init (global-flycheck-mode 1)
  :config
  ;; TODO: autoload only
  (defun turn-on-flycheck-mode ()
    "Turn on `flycheck-mode'."
    (interactive)
    (flycheck-mode 1)))
#+END_SRC

*** Flyspell config
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :after (evil-leader)
    :init
    (evil-leader/set-key
      "fb" 'flyspell-buffer
      "fn" 'flyspell-goto-next-error)
    :config
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+END_SRC

*** Window and buffer manipulation
**** other-window-previous-mode
#+BEGIN_SRC emacs-lisp
  (use-package other-window-previous-mode
    :quelpa (other-window-previous-mode
             :fetcher github
             :repo "EricCrosson/other-window-previous-mode")
    :config (other-window-previous-mode 1))
#+END_SRC

**** Zygospore toggle maximize-buffer
#+BEGIN_SRC emacs-lisp
  (use-package zygospore
    :ensure t
    :pin melpa-stable
    :bind ("C-x 1" . zygospore-toggle-delete-other-windows))
#+END_SRC

**** Zoom frame config
#+BEGIN_SRC emacs-lisp
  (use-package frame-fns
    :quelpa (frame-fns
             :fetcher github
             :repo "esc-emacs/frame-fns"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package frame-cmds
    :quelpa (frame-cmds
             :fetcher github
             :repo "esc-emacs/frame-cmds"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package zoom-frm
    :quelpa (zoom-frm
             :fetcher github
             :repo "esc-emacs/zoom-frm")
    :after (smartrep frame-fns frame-cmds)
    :config
    (smartrep-define-key
     global-map "C-x w"
     '(("+" . zoom-all-frames-in)
       ("-" . zoom-all-frames-out)))
    ;; OPTIONAL TODO: include core-micro-state.el from
    ;; https://github.com/syl20bnr/spacemacs/blob/master/core/core-micro-state.el

    ;; perhaps make the above into a standalone package
    ;; then bind zoom commands with a microstate
    )
#+END_SRC
**** Windmove config
#+BEGIN_SRC emacs-lisp
 ;; Windmove from shift keys
 (use-package windmove
   :ensure t
   :config
   (windmove-default-keybindings)
   (after 'org
     (setq org-replace-disputed-keys t)
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)))
#+END_SRC

***** Windswap config
#+BEGIN_SRC emacs-lisp
(use-package windswap
  :ensure t
  :config
  (windswap-default-keybindings 'control 'shift))
#+END_SRC

**** Split-and-move config
#+BEGIN_SRC emacs-lisp
  (use-package split-and-move
    :quelpa (split-and-move
             :fetcher github
             :repo "EricCrosson/split-and-move")
    :bind (("C-x 2" . split-and-move-below)
           ("C-x 3" . split-and-move-right)))
#+END_SRC

**** Follow current buffer config
#+BEGIN_SRC emacs-lisp
  (use-package follow-current-buffer
    :quelpa (follow-current-buffer
             :fetcher github
             :repo "EricCrosson/follow-current-buffer")
    :after (evil-leader)
    :init (evil-leader/set-key
            "bf" 'follow-mode
            "bF" 'follow-current-buffer))
#+END_SRC

**** switch-to-previous-buffer-mode
#+BEGIN_SRC emacs-lisp
  (use-package switch-to-previous-buffer-mode
    :quelpa (switch-to-previous-buffer-mode
             :fetcher github
             :repo "EricCrosson/switch-to-previous-buffer-mode")
    :after (evil-leader)
    :config
    (defun esc-switch-to-previous-buffer-mode-hook ()
      "Personal hook to bind/unbind keys for `switch-to-previous-buffer-mode'."
      (if switch-to-previous-buffer-mode
          (evil-leader/set-key "C-i" 'switch-to-previous-buffer)
        (evil-leader/set-key "C-i" nil)))
    (add-hook 'switch-to-previous-buffer-mode-hook
              'esc-switch-to-previous-buffer-mode-hook)
    (switch-to-previous-buffer-mode 1))
#+END_SRC

*** Rainbow delimeters mode config
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :pin melpa-stable
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Beacon config
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :pin melpa-stable
    :demand t
    :diminish beacon-mode
    :config (beacon-mode 1))
#+END_SRC

*** spray
TODO: create evil keybindings
TODO: configure default wpm
[[https://gitlab.com/iankelling/spray][Documentation]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package spray
    :quelpa (spray
             :fetcher git
             :url "https://gitlab.com/iankelling/spray.git")
    :after (evil-leader)
    :bind (
           ("<f5>" . spray-mode)
           ("<f6>" . spray-start/stop)
           )
    :config
    (setq spray-wpm 1200)
    ;; (evil-leader/set-key)
    )
#+END_SRC

*** Compilation buffer config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'same-window-buffer-names "*compilation*")
#+END_SRC
**** Bury successful compilation buffer
#+BEGIN_SRC emacs-lisp
  (use-package bury-successful-compilation
    :ensure t
    :pin melpa-stable
    :bind ("C-c C-m" . recompile)
    :config (bury-successful-compilation 1))
#+END_SRC

*** Define word
More thanks to [[https://github.com/abo-abo][abo-abo]].
#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :ensure t
    :pin melpa-stable
    :bind ("C-h d"  . define-word-at-point))
#+END_SRC

*** Lexbind config
#+BEGIN_SRC emacs-lisp
  (use-package lexbind-mode
    :ensure t
    :init (add-hook 'emacs-lisp-mode-hook 'lexbind-mode))
#+END_SRC

*** Goto last change config
#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Misc cmds config
#+BEGIN_SRC emacs-lisp
  (use-package misc
    :commands zap-up-to-char
    :init ; seeing as I don't use these commands terribly often
    :bind (("M-z" . zap-up-to-char)  ; up-to, life saver
           ("M-Z" . zap-to-char)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package misc-cmds
    :quelpa (misc-cmds
             :fetcher github
             :repo "EricCrosson/misc-cmds")
    :after (evil-leader)
    :commands revert-buffer-no-confirm
    :bind ("C-x M-r" . revert-buffer-no-confirm)
    :init (evil-leader/set-key "br" 'revert-buffer-no-confirm))
#+END_SRC

*** Browse kill ring config
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (setq kill-ring-max 256)
    (browse-kill-ring-default-keybindings)
    (evil-leader/set-key "ry" 'browse-kill-ring))
#+END_SRC

*** Keyfreq mode config
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :pin melpa-stable
    :config (keyfreq-autosave-mode 1)
    (setq keyfreq-file
          (expand-file-name "keyfreq" esc-meta-directory)))
#+END_SRC
*** Dumb jump config
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :bind ("C-'" . dumb-jump-go)
    :config
    (evil-leader/set-key "sd" 'dump-jump-go)
    (dumb-jump-mode 1))
#+END_SRC

*** Expand region config
[[http://spw.sdf.org/blog/tech/emacs/expandregionlines.html][Notes from the Library : /blog/tech/emacs/expandregionlines.html]]
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config (evil-leader/set-key "v" 'er/expand-region)
    (defadvice er/expand-region (around fill-out-region activate)
      (if (or (not (region-active-p))
              (eq last-command 'er/expand-region))
          ad-do-it
        (if (< (point) (mark))
            (let ((beg (point)))
              (goto-char (mark))
              (end-of-line)
              (forward-char 1)
              (push-mark)
              (goto-char beg)
              (beginning-of-line))
          (let ((end (point)))
            (goto-char (mark))
            (beginning-of-line)
            (push-mark)
            (goto-char end)
            (end-of-line)
            (forward-char 1))))))
#+END_SRC

*** Eyebrowse config
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :pin melpa-stable
    :after (evil-leader)
    :config
    (evil-leader/set-key
      "0" 'eyebrowse-switch-to-window-config-0
      "1" 'eyebrowse-switch-to-window-config-1
      "2" 'eyebrowse-switch-to-window-config-2
      "3" 'eyebrowse-switch-to-window-config-3
      "4" 'eyebrowse-switch-to-window-config-4
      "5" 'eyebrowse-switch-to-window-config-5
      "6" 'eyebrowse-switch-to-window-config-6
      "7" 'eyebrowse-switch-to-window-config-7
      "8" 'eyebrowse-switch-to-window-config-8
      "9" 'eyebrowse-switch-to-window-config-9
      "`" 'eyebrowse-last-window-config
      "\\" 'eyebrowse-close-window-config)
    (eyebrowse-mode 1))
#+END_SRC

*** Clipmon config
#+BEGIN_SRC emacs-lisp
  (use-package clipmon
    :ensure t
    :init (defvar clipmon--autoinsert " clipmon--autoinserted-this"))
#+END_SRC

*** Recentf config
#+BEGIN_SRC emacs-lisp
  (setq recentf-auto-cleanup 'never)
  (use-package recentf
    :ensure t
    :config (setq recentf-max-menu-items 200
                  recentf-max-saved-items 15
                  recentf-save-file (expand-file-name
                                     "recentf" esc-meta-directory)
                  recentf-keep '(file-remote-p file-readable-p)))
#+END_SRC

*** Tea time config
#+BEGIN_SRC emacs-lisp
  (use-package tea-time
    :ensure t
    :defer t
    :after (notifications)
    :commands tea-time
    :config
    (defun esc/notify-tea-steeped ()
      "Notification function that tea has finished steeping."
      (notifications-notify :title "Tea time"
                            :body "Rip out that sac, because your tea bag is done"
                            :app-name "Tea Time"
                            :sound-name "alarm-clock-elapsed"))
    (add-hook 'tea-time-notification-hook 'esc/notify-tea-steeped))
#+END_SRC

*** Highlight-numbers mode
Beware the magic nums, my son
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :pin melpa-stable
    :hook (prog-mode . highlight-numbers-mode))
#+END_SRC

*** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :pin melpa-stable)
#+END_SRC

*** Save session config
**** Saveplace config
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :ensure t
    :config
    (setq-default save-place t)
    (setq save-place-file (expand-file-name "places"
                                            esc-meta-directory)))
#+END_SRC

**** Savehist config
Keep a history of =M-x= across sessions.
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure t
    :config
    (setq savehist-file (concat user-emacs-directory "meta/savehist"))
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))
    (savehist-mode 1))
#+END_SRC

**** Save desktop config
#+BEGIN_SRC emacs-lisp
  (defadvice desktop-save-in-desktop-dir (before ensure-desktop-dir-exists activate)
      "Ensure `desktop-dirname' exists before function
    `desktop-save-in-desktop-dir' attempts to save the desktop
    file."
      (mkdir desktop-dirname t))

  (setq desktop-path '("~/.emacs.d/meta/desktop/") ;local desktop files
        desktop-base-filename "default"
        desktop-load-locked-desktop t     ;never freeze after crash
        backup-by-copying-when-linked t
        backup-by-copying-when-mismatch t)
  (mkdir (car desktop-path) t)            ; ensure desktop-save dir exists
  (desktop-save-mode 1)                   ;use desktop file
#+END_SRC

*** clone-indirect-buffer-other-frame
#+BEGIN_SRC emacs-lisp
  (use-package clone-indirect-buffer-other-frame-mode
    :quelpa (clone-indirect-buffer-other-frame-mode
             :fetcher github
             :repo "EricCrosson/clone-indirect-buffer-other-frame-mode"))
#+END_SRC

*** undo-tree config
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :after (evil)
    :config

    (global-undo-tree-mode 1)
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-relative-timestamps t
          undo-limit (* 1024 1024)
          ;; undo-tree-auto-save-history nil
          )

    (evil-set-undo-system 'undo-tree)

    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      "Make zipped `undo-tree' files obvious."
      (setq ad-return-value (concat ad-return-value ".gz")))

    ;; Thanks to [[http://whattheemacsd.com/my-misc.el-02.html][Magnar]]
    ;; for the advice.
    (defadvice undo-tree-undo (around keep-region activate)
      (if (use-region-p)
          (let ((m (set-marker (make-marker) (mark)))
                (p (set-marker (make-marker) (point))))
            ad-do-it
            (goto-char p)
            (set-mark m)
            (set-marker p nil)
            (set-marker m nil))
        ad-do-it)))
#+END_SRC

*** Impatient mode
#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    :ensure t
    :pin melpa-stable
    :defer t
    :config
    (defun markdown-html (buffer)
      (princ (with-current-buffer buffer
               (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
             (current-buffer))))
#+END_SRC
TODO: consider how useful it would be to extend this to other markdown
types. pandoc is a possibility, but then you are observing something
other than what will be published.
*** Wakatime mode
#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :ensure t
    :config
    (load (expand-file-name "wakatime" esc-secrets-directory))
    (global-wakatime-mode)
)
#+END_SRC
*** Restart-emacs config
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t
    :pin melpa-stable)
#+END_SRC

** OS-Specific config
TODO: replace with (use-package with-os) after submission to melpa is approved
#+BEGIN_SRC emacs-lisp
  (use-package with-os
    :quelpa (with-os
             :fetcher github
             :repo "ericcrosson/with-os")
    :config
    (with-os
     :darwin
     ;; for railway-cat's emacs 28 brew install
     ;(mac-mouse-wheel-mode 1)
     (setq mouse-wheel-progressive-speed nil)
     (setq mac-option-modifier 'meta
           mac-command-modifier 'super)
     (use-package osx-browse
       :ensure t
       :pin melpa-stable
       :config
       (osx-browse-mode 1)
       (setq browse-url-dwim-always-confirm-extraction nil)
       (global-set-key (kbd "s-w") nil))))
#+END_SRC
*** Begin sexp
#+BEGIN_SRC emacs-lisp :tangle no
  (cond
#+END_SRC
*** Microsoft Windows
#+BEGIN_SRC emacs-lisp :tangle no
   ((string-equal system-type "windows-nt")
    (progn
      (message "Microsoft Windows")))
#+END_SRC
*** Mac OS X
#+BEGIN_SRC emacs-lisp :tangle no
  ((string-equal system-type "darwin")
   (progn
     (use-package osx-browse
       :ensure t
       :pin melpa-stable
       :config
       (osx-browse-mode 1)
       (setq browse-url-dwim-always-confirm-extraction nil)
       (global-set-key (kbd "s-w") nil))))
#+END_SRC
*** GNU/Linux
#+BEGIN_SRC emacs-lisp :tangle no
   ((string-equal system-type "gnu/linux")
    (progn
      (message "Linux")))
#+END_SRC
*** Conclude sexp
#+BEGIN_SRC emacs-lisp :tangle no
)
#+END_SRC

** Fin
Start the server if we made it this far in one piece.
#+BEGIN_SRC emacs-lisp
  (unless (server-running-p) (server-start))
#+END_SRC

Have a great day~
#+BEGIN_SRC emacs-lisp
  (use-package dont-panic
    :quelpa (dont-panic
             :fetcher github
             :repo "EricCrosson/dont-panic"))
#+END_SRC

Inform the driver that init has completed.
#+BEGIN_SRC emacs-lisp
  (message "All done, %s." (user-login-name))
  ;;; .emacs.el ends here
#+END_SRC

** File-specific                                                  :noexport:
#  LocalWords:  gtd Tronesque darkokai terraform
