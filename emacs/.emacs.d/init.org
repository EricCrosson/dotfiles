#+author: Eric Crosson
#+email: esc@ericcrosson.com
#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) | OPTIONAL(o) HIATUS(h) DONE(d) DISCARDED(c) HACKED(k)
#+startup: content
* init.el
** Introduction
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
    ;;; .emacs.el

    ;;; Commentary:
    ;;; This is the .emacs file written and used by esc. The .el file is
    ;;; not the original form of this document; it was written in org
    ;;; babel. If you are not viewing the org document, you should try to
    ;;; locate it. It's much nicer to humans.

    ;;; License:
    ;;; esc's .emacs configuration file, for a smoother Emacs experience.
    ;;; Copyright (C) 2013 Eric Crosson
    ;;;
    ;;; This program is free software: you can redistribute it and/or modify
    ;;; it under the terms of the GNU General Public License as published by
    ;;; the Free Software Foundation, either version 3 of the License, or
    ;;; (at your option) any later version.
    ;;;
    ;;; This program is distributed in the hope that it will be useful,
    ;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    ;;; GNU General Public License for more details.
    ;;;
    ;;; You should have received a copy of the GNU General Public License
    ;;; along with this program. If not, see <http://www.gnu.org/licenses/>.

    ;;; Code:
#+END_SRC

** Quelpa
# installed packages
# (ac-haskell-process achievements ant apt-utils anzu cache
# -          discover fullframe smartscan fold-this apt-utils-ido
# -          wiki-summary xahk-mode auto-package-update
# -          archives asilea async auctex highlight-symbol use-package
# -          auto-compile bliss-theme monochrome-theme ctags-update
# -          monochrome-theme writegood-mode writeroom-mode company
# -          yaml-mode yasnippet undo-tree bind-key muttrc-mode
# -          mode-line-in-hdeader powerline goto-last-change github
# -          github lua-mode spray tea-time golden-ratio web-mode
# -          fic-mode bury-successful-compilation idle-highlight
# -          flx-ido git-gutter+ multiple-cursors bm spotify
# -          ace-jump-mode ace-window git-messenger keyfreq
# -          browse-kill-ring clipmon bitly paradox weather-mento
# -          workgroups persp-mode haskell-mode pretty-lambdada
# -          bash-completion markdown-mode magit expand-region
# -          autopair lexbind-mode helm rainbow-delimeters
# -          org-cliplink dictionary unkillable-scratch dash diminish
# -          autodisass-java-bytecode auto-overlays brainfuck-mode
# -          broadcast capture cd-compile c-eldoc checkbox
# -          cmake-font-lock cmake-mode color-theme connection
# -          css-eldoc cssh curl-for-url default-text-scale
# -          dired-details disaster disaster-arm doctags eldoc-eval
# -          epl flycheck flycheck-package fpaste ghci-completion
# -          git-commit-mode gitconfig-mode git-rebase-mode
# -          git-timemachine gntp gnu-apl-mode gnupg gtags hide-lines
# -          highlight highlight-thing htmlize hydra ibuffer-tramp
# -          ibuffer-vc jist langdoc let-alist link litable
# -          lorem-ipsum macrostep misc-cmds move-text multi
# -          multiple-cursors names neotree noflet offlineimap
# -          on-screen operate-on-number org org-eldoc package-build
# -          package-safe-delete packed pdf-tools persistent-scratch
# -          pkg-info plantuml-mode poker popup popwin quelpa request
# -          rtos-dev-mode rtos-interrupt-generator rubocop ruby-mode
# -          scratch shell-command smartrep smooth-scrolling spinner
# -          ssh-config-mode ssh-tunnels sunshine symon synonyms
# -          synosaurus tablist term-run tup-mode typing unfill vlf)

TODO: load and install gracefully
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (mapc (lambda (mode) (quelpa `(,mode :repo ,(format "EricCrosson/%s" mode) :fetcher github)))
        '(browse-cliplink
          color-theme-stack
          dedicated-buffer
          ido-extras
          mwheel-scroll-all
          org-indent-header
          displaced-yank
          help-extras
          help-find-org
          unselectable-buffer
          dedicated-buffer
          clean-mode-line
          tagsgen
          org-jump-src-block
          os-interaction
          mojo
          esc-mode
          hide-mode-line
          scroll-slight))
#+END_SRC

** Package configuration and Load path
This is a neat trick I found to take away 99.9% of the headache when
dealing with Emacs' load path. Assuming the user has placed every
file, script and dependency in his or her =~/.emacs.d/= directory, this
block will ensure Emacs can find each file come load time. No need to
keep the list updated, just load all subdirectories and go.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defgroup esc-init nil
    "Initialization parameters of esc's system."
    :group 'init)

  (defcustom site-lisp-path "~/.emacs.d/site-lisp/"
    "Path to esc's lisp library."
    :type 'path
    :options '("~/.emacs.d/site-lisp/")
    :group 'esc-init)

  (defcustom esc-meta-path "~/.emacs.d/meta"
    "Path to .emacs.d meta directory, for internal bookkeeping
  records."
    :type 'path
    :options '("~/.emacs.d/meta")
    :group 'esc-init)

  (defcustom elpa-path "~/.emacs.d/elpa"
    "Path to elpa directory."
    :type 'path
    :options '("~/.emacs.d/elpa")
    :group 'esc-init)

  (mapc (lambda (load-all-subdirs)
          (let ((default-directory load-all-subdirs))     ;for easy
            (normal-top-level-add-to-load-path '("."))    ;recursive
            (normal-top-level-add-subdirs-to-load-path))) ;loading
        (list site-lisp-path elpa-path))
#+END_SRC

Use [[https://github.com/jwiegley/use-package][use-package]]
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (eval-when-compile (require 'use-package))
  (use-package package
    :config
    (mapc (lambda (source) (add-to-list 'package-archives source) t)
          '(("gnu" . "http://elpa.gnu.org/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
            ("melpa" . "http://melpa.milkbox.net/packages/")
            ("org" . "http://orgmode.org/elpa/")))
    (package-initialize))
#+END_SRC

Set up [[https://github.com/tarsius/auto-compile][auto-compile mode]] to compile source files before loading iff
source is newer than the presently compiled file. A good tradeoff
with proper distributed version control.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package auto-compile
    :ensure t
    :init (setq load-prefer-newer t)
    :config (auto-compile-on-load-mode 1))
#+END_SRC

** UI
Now that the legal stuff is out of the way, let's get out the rat poison.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (mapc (lambda (mode) (when (fboundp mode) (funcall mode -1)))
        '(menu-bar-mode
          tool-bar-mode
          scroll-bar-mode))
#+END_SRC

Fire up the mood lighting
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package bliss-theme
    :ensure t
    ;; TODO: switch with color-theme stack
    :config (load-theme 'bliss t))

  ;; TODO: rehook on color change to bliss
  (mapcar (lambda (data) (set-face-attribute (car data) nil
                                        :underline  nil
                                        :foreground 'unspecified
                                        :background (cadr data)))
          '((highlight "#333")
            (region    "#444")))
#+END_SRC
    
** Fonts
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defun font-exists-p (font)
    "Nil unless FONT is recognized by Emacs."
    (if (null (x-list-fonts font)) nil t))
#+END_SRC

Favored font of late
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (let ((esc-font "Meslo LG S 8"))
    (when (font-exists-p esc-font)
      (set-face-attribute 'default nil :font esc-font)))
#+END_SRC
    
** Macros
I took the macro below from [[http://milkbox.net/note/single-file-master-emacs-configuration/][milkypostman]]. His article is really worth
a read; stop what you're doing and go take a look if you haven't.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
(defmacro after (mode &rest body)
  "`eval-after-load' MODE evaluate BODY."
  (declare (indent defun))
  `(eval-after-load ,mode
     '(progn ,@body)))
#+END_SRC

** User data
Hello, My Name Is
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq user-full-name "Eric Crosson"
        user-mail-address "esc@ericcrosson.com")
#+END_SRC

** Behavioral modifications
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (put 'overwrite-mode 'disabled t)       ;There shall be no 'insert'
  (fset 'yes-or-no-p 'y-or-n-p)           ;change yes-no to y-n
  (setq-default size-indication-mode t)
  (setq ;debug-on-error t
        inhibit-startup-screen t
        initial-scratch-message nil
        ring-bell-function 'ignore        ;turn off alarms completely
        disabled-command-function 'beep   ;alert me when accessing disabled funcs
        redisplay-dont-pause t            ;don't pause refreshes
        frame-title-format '("emacs@" system-name ":%f") ;include path of frame
        display-time-load-average-threshold 0.6
        dabbrev-case-replace nil
        display-buffer-reuse-frames t     ;raise buffers, not spawn
        remote-file-name-inhibit-cache t  ;don't resolve remote file attrubutes
        auto-save-default nil
        large-file-warning-threshold nil
        save-interprogram-paste-before-kill t
        set-mark-command-repeat-pop t
        starttls-use-gnutls t
        browse-url-browser-function 'browse-web
        kill-buffer-query-functions (remq 'process-kill-buffer-query-function
                                           kill-buffer-query-functions))
#+END_SRC

Now everybody agrees that the =*Minibuffer*= prompt is uneditable.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq minibuffer-prompt-properties '(read-only t point-entered
                                                 minibuffer-avoid-prompt face
                                                 minibuffer-prompt))
#+END_SRC

Line numbers, when visible, should be loaded after a short delay and
not loaded eagerly. They're candy, and who spends resources acquiring
candy?
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq linum-delay t
        linum-eager nil)
#+END_SRC

These settings keep the text soup that is GNU/Linux as happy as
GNU/Linux files can be.
#+NAME: char-and-font-encoding
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Char and font encoding
  (set-buffer-file-coding-system 'unix)
  (setq-default indent-tabs-mode nil)
  (setq c-default-style "linux"
        c-basic-offset 4
        tab-width 4
        require-final-newline 'visit-save ;compliance
        comment-style 'indent)
#+END_SRC

It is my belief that backup files should not be so obtrusive as to
tempt users to disable them.
#+NAME: stash-backups
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Backup settings
  (push '("." . "~/.config/.emacs.d/") backup-directory-alist)
#+END_SRC

=i-search= is capable of spanning whitespace regions
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq search-whitespace-regexp "[ \t\r\n]+")
#+END_SRC

** Aliases
I did not grow up in an era where this is a straightforward mnemonic.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defalias 'undefun 'fmakunbound)
#+END_SRC
   
** Configuration
*** Auto package update config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package auto-package-update
    :ensure t
    :config
      (setq auto-package-update-interval 14)
      ;; todo: put on an idle-timer of 5 minutes
      (ignore-errors (auto-package-update-maybe)))
#+END_SRC

*** Mojo config
Mojo is my personal extension of the GNU Emacs global namespace.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; (use-package mojo)
#+END_SRC

*** esc mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package esc-mode
    :config
    (setq esc/associated-modes
          '(ido-mode
            eldoc-mode
            help-extras
            winner-mode
            keyfreq-mode
            recentf-mode
            ;; icomplete-mode ;; old-school
            auto-fill-mode
            show-paren-mode
            line-number-mode
            display-time-mode
            column-number-mode
            global-hl-line-mode
            ;; display-battery-mode
            autopair-global-mode
            auto-compression-mode
            global-on-screen-mode
            global-font-lock-mode
            global-auto-revert-mode
            global-rainbow-delimiters-mode))

    (setq esc/disassociated-modes
          '(tool-bar-mode
            menu-bar-mode
            scroll-bar-mode
            blink-cursor-mode
            transient-mark-mode))

    ;; todo: some sort of general mode association, i.e. entering
    ;; minibuffer/multiple-cursors

    ;;; esc-mode key bindings
    ;; Remaps -- wherever they may be bound
    (esc-replace-key 'goto-line 'goto-line-with-feedback)
    (esc-replace-key 'split-window-right 'esc/hsplit-last-buffer)
    (esc-replace-key 'split-window-below 'esc/vsplit-last-buffer)

    (use-package anzu
      :ensure t
      :init
      (esc-replace-key 'query-replace 'anzu-query-replace)
      (esc-replace-key 'query-replace-regexp 'anzu-query-replace-regexp))

    (use-package fullframe
      :ensure t
      :init
      (fullframe paradox-list-packages paradox-quit-and-close)
      (esc-key "s-[" 'paradox-list-packages)
      (fullframe magit-status magit-mode-quit-window)
      (esc-key "s-q" 'magit-status)
      (fullframe spray-mode spray-quit))

    ;; todo: pull buffer management into another hydra
    ;; Buffer management
    (esc-key "C-x 4 k"    'mode-line-other-buffer-other-window)
    (esc-key "C-c C-b"    'mode-line-other-buffer)
    (esc-key "C-c C-M-\\" 'indent-buffer)
    (esc-key "C-x o"      'ace-window)
    (esc-key "C-x M-b"    'bury-buffer)
    (esc-key "C-c o"      'clone-indirect-buffer-other-window)
    (esc-key "C-c C-o"    'ff-find-other-file)

    ;; Enhanced keybindings
    (esc-key "C-a"     'back-to-indentation-or-beginning)
    (esc-key "M-s o"   'occur-dwim)

    (esc-key "C-c y"   'middle-click-yank)

    (esc-key "C-." 'swiper)

    ;; Backspace behavior
    (esc-key "C-<backspace>" 'backward-delete-word)

    ;; Line tramsformations
    (esc-key "M-K"     'kill-sentence)
    (esc-key "C-c k"   'copy-line)
    (esc-key "M-k"     'pull-up-line)
    (esc-key "C-M-k"   'delete-line)

    ;; Miscellaneous keybindings
    (esc-key "M-j"     'just-one-space) ; conflicts with some WMs/OSes
    (esc-key "M-P"     'align-regexp)
    (esc-key "C-'"     'query-replace)
    (esc-key "C-?"     'undo-tree-visualize)
    (esc-key "C-M-z"   'edebug-defun)
    (esc-key "C-c l h" 'insert-lisp-comment-header)
    ;; TODO: change sexp wrapping (esc-key i 'e. {}[]())

    ;; Programming bindings
    (esc-key "C-c m"   'compile)
    (esc-key "C-c C-m" 'recompile)

    ;; C-q cluster
    (esc-key "C-q" 'delete-region)     ;like C-w, but gone forever.
    (esc-key "C-c q" 'auto-fill-mode)  ;more frequented than
    (esc-key "C-c C-q" 'quoted-insert) ;  this command

    ;; newline creation
    (esc-key "<C-return>"   'open-line-below)
    (esc-key "<C-S-return>" 'open-line-above)
    (esc-key "C-M-O"        'split-line)

    (esc-key "C-c d" 'dictionary-search)

    ;; Mark commands
    (esc-key "C-x m" 'pop-to-mark-command)

    ;; Lisp/sexp movement
    (esc-key "C-S-k" 'kill-sexp)

    ;;; Function keys
    (esc-key "C-c <f5>" 'copy-file-name-to-clipboard)
    (esc-key "<f5>"  'minibuffer-display-buffer-file-name)
    (esc-key "<f8>"  'follow-mode-80-char-compliant)
    (esc-key "<f9>"  'flyspell-buffer)
    (esc-key "<f10>" 'golden-ratio-mode)

    (esc-key "C-c C-;" 'execute-extended-command)
    (esc-key "C-c f" 'esc/visit-favorite-dir)

    (esc-key "C-x C-c" 'neotree-toggle) ;; no chance of accidental exit

    (after 'hydra
      (setq hydra-lv nil) ;; has never worked for me

      (defhydra hydra-spray (esc-mode-map "<f6>")
        "spray-mode"
        ("s" spray-mode "spray (at point)")
        ("j" spray-mode-decrease-wpm "decrease wpm")
        ("k" spray-mode-increase-wpm "increase wpm"))

      (defhydra hydra-text-scale (esc-mode-map  "<f2>")
        "text-scale"
        ("j" text-scale-decrease "dec")
        ("k" text-scale-increase "inc")
        ("." default-text-scale-increase "default-dec")
        ("," default-text-scale-decrease "default-inc"))

      (defhydra hydra-eval (esc-mode-map "C-c C-e")
        "eval"
        ("r" eval-region "region")
        ("b" eval-buffer "buffer")
        ("s" eval-last-sexp "sexp")
        ("d" eval-defun "defun")
        ("b" edebug-defun "edebug")
        ("p" esc/eval-and-replace "& replace"))

      (defhydra hydra-error (esc-mode-map "M-g")
        "goto-error"
        ("h" first-error "first")
        ("j" next-error "next")
        ("k" previous-error "prev")
        ("l" goto-line-with-feedback "goto-line" :color blue))

      (defhydra hydra-multiple-cursors (esc-mode-map "M-a")
        "multiple-cursors"
        ("l" mc/edit-lines "edit")
        ("n" mc/mark-next-like-this "mark next")
        ("p" mc/mark-previous-like-this "mark prev")
        ("s" mc/sort-regions "sort")
        ("r" mc/reverse-regions "reverse")
        ("e" mc/insert-numbers "enumerate")
        ("*" mc/mark-all-like-this "mark all")
        ("o" mc/mark-all-like-this-dwim "mark all dwim"))

      ;; todo: move to beginning of word in pre hook
      (defhydra hydra-case-word-at-point (esc-mode-map "C-S-l")
        "case word at point"
        ("c" capitalize-word "capitalize")
        ("u" upcase-word "upcase")
        ("l" downcase-word "lowercase"))

      ;; todo: create a mirror that manipulates `other-buffer'
      (use-package smartscan :ensure t)
      (esc-key "M-m M-m" 'back-to-indentation)
      (defhydra hydra-scroll-buffer (esc-mode-map "M-m")
        "cursor-movement"
        ("j" scroll-slight-up nil)
        ("k" scroll-slight-down nil)
        ("h" backward-char nil)
        ("l" forward-char nil)
        ("s" smartscan-symbol-go-forward "i-f")
        ("r" smartscan-symbol-go-backward "i-r")
        ("n" next-line "next")
        ("p" previous-line "prev")
        ("e" end-of-line "end-ln")
        ("a" beginning-of-line "beg-ln")
        ("d" scroll-up "pg up")
        ("u" scroll-down "pg dn")
        ("/" goto-last-change "last-chng")
        ("." find-tag "tag")
        ("*" pop-tag-mark "pop"))

      (defhydra hydra-window-adjustment (esc-mode-map "C-z")
        "window adjustment"
        ("r" esc/rotate-window-split "rotate")
        ("p" esc/swap-buffer-locations "swap")
        ("o" esc/should-have-opened-this-in-other-window "other window" :color blue)
        ("s" unselectable-buffer "selectable")
        ("d" dedicated-buffer "dedicated")
        ("b" mode-line-other-buffer "mode-line-other-buffer")
        ("u" bury-buffer "bury"))

      ;; (after 'org
      ;;   (defhydra hydra-org-nav-source-block (esc-mode-map "C-c n")
      ;;     "org src block nav"
      ;;     ("n" org-jump-next-src-block "next")
      ;;     ("p" org-jump-prev-src-block "prev")))

      (defhydra hydra-move-text (esc-mode-map "<C-M-return>")
        "move text"
        ;; move-text bindings
        ("j" move-text-down "down")
        ("k" move-text-up "up")
        ;; fold-this bindings
        ("f" fold-this "fold-this")
        ("u" fold-this-unfold-all "unfold all")
        ;; highlight-symbol bindings
        ("h" highlight-symbol-at-point)
        ("n" unhighlight-regexp)
        ("%" highlight-symbol-query-replace)))

    (esc-mode 1))
#+END_SRC


*** Persistent scratch config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq persistent-scratch-save-file (format "%s/persistent-scratch" esc-meta-path))
  (persistent-scratch-autosave-mode 1)
#+END_SRC

*** Writegood mode config
  #+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package writegood-mode
        :ensure t
        :config
          (add-hook 'fundamental-mode-hook 'writegood-mode)
          (add-hook 'latex-mode-hook 'writegood-mode))
    #+END_SRC

*** Company mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package company
    :ensure t
    :config
    (setf company-idle-delay 0
          company-minimum-prefix-length 2
          company-show-numbers t
          company-selection-wrap-around t
          company-dabbrev-ignore-case t
          company-dabbrev-ignore-invisible t
          company-dabbrev-downcase nil)
    (global-company-mode t)
    (after 'diminish (diminish 'company-mode))
    (after 'esc-mode
      (esc-key "M-?" 'company-dabbrev)
      (esc-key "M-/" 'dabbrev-expand))

    ;; Sometimes `company-mode' isn't the best option.
    (defun turn-off-company-mode ()
      (company-mode -1))
    (mapc (lambda (mode-hook)
            (add-hook mode-hook 'turn-off-company-mode))
          '(shell-mode-hook
            gud-mode-hook)))
#+END_SRC

*** undo-tree config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-limit (* 1024 1024))
    ;; todo: associate with esc-mode
    (undo-tree-mode 1)
    (setq undo-tree-auto-save-history t)
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      "Make zipped `undo-tree' files obvious."
      (setq ad-return-value (concat ad-return-value ".gz")))

    ;;; Thanks to
    ;;; [[http://whattheemacsd.com/my-misc.el-02.html][Magnar]] for the
    ;;; advice.
    (defadvice undo-tree-undo (around keep-region activate)
      (if (use-region-p)
          (let ((m (set-marker (make-marker) (mark)))
                (p (set-marker (make-marker) (point))))
            ad-do-it
            (goto-char p)
            (set-mark m)
            (set-marker p nil)
            (set-marker m nil))
        ad-do-it)))
#+END_SRC

*** Bind key config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package bind-key :ensure t)
#+END_SRC

*** Help find org config
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package help-find-org
     :config (help-find-org 1))
#+END_SRC

*** Displaced yank config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package displaced-yank
      :config
      (mapc (lambda (function)
            (let ((funcname (car function))
                  (data     (cdr function)))
              (eval `(define-displaced-yank ,funcname ,data))))
          '((parens              "()")
            (braces              "{}")
            (brackets            "[]")
            (brackets-with-colon "[:]")
            (pipes               "||")
            (chevrons            "<>")
            (quotes              "\"\"")
            (single-quotes       "''")
            (stars               "**")
            (dollars             "$$")
            (equals              "==")
            ;; a good example of code reuse
            (ticks               "`'")
            (little-arrow        "->" 0)
            (doxygen-comment     "/*!  */" 3)))

      ;; todo: load with use-package displaced yank
      ;; esc delimeter and line hacks

      (after 'esc-mode
        (bind-key "C-M--"  'yank-displaced-little-arrow    esc-mode-map)
        (bind-key "C-M-j"  'yank-displaced-parens          esc-mode-map)
        (bind-key "C-M-k"  'yank-displaced-braces          esc-mode-map)
        (bind-key "C-M-|"  'yank-displaced-pipes           esc-mode-map)
        (bind-key "C-M-l"  'yank-displaced-brackets        esc-mode-map)
        (bind-key "C-M-,"  'yank-displaced-chevrons        esc-mode-map)
        (bind-key "C-M-'"  'yank-displaced-single-quotes   esc-mode-map)
        (bind-key "C-M-\"" 'yank-displaced-quotes          esc-mode-map)
        (bind-key "C-M-g"  'yank-displaced-dollars         esc-mode-map)
        (bind-key "C-M-;"  'yank-displaced-stars           esc-mode-map)
        (bind-key "C-M-:"  'yank-displaced-doxygen-comment esc-mode-map)
        (bind-key "C-M-="  'yank-displaced-equals          esc-mode-map)
        (bind-key "C-M-`"  'yank-displaced-ticks           esc-mode-map))
      ;; todo:
      ;; prefix to C-M-` should tick thing at point
      )
#+END_SRC

*** Powerline config
That's right, it's [[http://2.media.bustedtees.cvcdn.com/e/-/bustedtees.09c737ee-d77b-45da-ac5c-b9bbb562.gif][Power⚡Line]] baby!
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package powerline
    :ensure t
    :disabled t
    :config (powerline-default-theme))
#+END_SRC

*** Help extras conf
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package help-extras
     :config (help-extras 1))
#+END_SRC

*** Goto last change conf
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package goto-last-change
     :ensure t
     :init (bind-key "C-c /" 'goto-last-change esc-mode-map))
#+END_SRC

*** Which func config
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package which-func
    :ensure t
    :disabled t
    :config (mapc (lambda (mode) (add-to-list 'which-func-modes mode))
                  '(;org-mode
                    emacs-lisp-mode
                    c-mode
                    c++-mode
                    java-mode
                    ruby-mode
                    enh-ruby-mode)))
#+END_SRC

*** Midnight config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package midnight
    :ensure t
    :config (midnight-delay-set 'midnight-delay "5:00am"))
#+END_SRC

*** Swiper config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package swiper
    :ensure t)
#+END_SRC

*** Firestarter mode
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
    (use-package firestarter
      :ensure t
      :config
      (firestarter-mode 1)
      (after 'diminish
        (diminish 'firestarter-mode)))
#+END_SRC

*** Unselectable buffer config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package unselectable-buffer)
#+END_SRC

*** Dedicated buffer config
My dedicated mode, not the melpa one
TODO: expand on that
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package dedicated-buffer)
#+END_SRC

*** Muttrc mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package muttrc-mode
    :mode "\\.muttrc$")
#+END_SRC

*** Lua mode config
Gotta love that [[http://awesome.naquadah.org/][awesome wm]]
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package lua-mode
    :ensure t
    :mode "\\.lua$"
    :interpreter "lua")
#+END_SRC

*** Auto complete config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package auto-complete
    :ensure t
    :disabled t
    :commands global-auto-complete-mode
    :init
    (setq ac-comphist-file (format "%s/ac-comphist.dat" esc-meta-path))

    :config
    (global-auto-complete-mode t)
    (ac-config-default)
    (setq-default ac-auto-show-menu .1)
    (setq-default ac-sources (append '(ac-source-imenu) ac-sources))
    (add-to-list 'ac-dictionary-directories
                 "~/.emacs.d/auto-complete/ac-dict"))
#+END_SRC

*** Spray config
This mode is based on [[https://github.com/Miserlou/Glance-Bookmarklet][OpenSpritz]], a speedreading tutor.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package spray
    :ensure t
    :commands spray-mode
    :config
      (setq-default spray-wpm 780)
      (defvar esc-spray-wpm-delta 10
        "Delta to apply to `spray-wpm' during on-the-fly wpm adjustments.")
      (defun spray-mode-increase-wpm ()
        (setq-default spray-wpm (+ spray-wpm esc-spray-wpm-delta)))
      (defun spray-mode-decrease-wpm ()
        (setq-default spray-wpm (- spray-wpm esc-spray-wpm-delta))))

#+END_SRC

*** ibuffer config
TODO: use-package this guy
Modify ibuffer view to include human readable size information.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Use human readable Size column instead of original one
  (after 'ibuffer
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000)  (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000)    (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    (setq ibuffer-formats
          '((mark modified read-only         " "
                  (name 18 18  :left :elide) " "
                  (size-h 9 -1 :right)       " "
                  (mode 16 16  :left :elide) " "
                  filename-and-process))))
#+END_SRC

ibuffer-vc is great; make it automatic.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (after 'ibuffer-vc-autoloads
    (defun esc/ibuffer-vc-refresh ()
      (ibuffer-vc-set-filter-groups-by-vc-root)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    (add-hook 'ibuffer-hook 'esc/ibuffer-vc-refresh))
#+END_SRC

Include vc status info in the buffer list.
Mabye I'll include this one day, for now it can live in hibernation.
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (after 'ibuffer-vc-autoloads
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)         " "
                  (size 9 -1  :right)               " "
                  (mode 16 16 :left :elide)         " "
                  (vc-status 16 16 :left)           " "
                  filename-and-process))))
#+END_SRC


*** Tea-time config
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package tea-time
    :ensure t
    :commands tea-time
    :config
    (defun esc/notify-tea-steeped ()
      (notifications-notify :title "Tea time"
                            :body "Rip out that sac, because your tea bag is done"
                            :app-name "Tea Time"
                            :sound-name "alarm-clock-elapsed"))
    (add-hook 'tea-time-notification-hook 'esc/notify-tea-steeped))
#+END_SRC

*** Scroll all mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq mwheel-scroll-up-function   'mwheel-scroll-all-scroll-up-all
        mwheel-scroll-down-function 'mwheel-scroll-all-scroll-down-all)
#+END_SRC


*** Very Large File mode config
Configure options for transparent handling of very large files.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (after 'vlf-integrate
    (vlf-set-batch-size (* 10 1024))    ;1.mb
    (custom-set-variables
     '(vlf-application 'dont-ask)))
#+END_SRC

*** Golden ratio config mode
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package golden-ratio
    :ensure t
    :init (after 'golden-ratio
            (add-to-list 'golden-ratio-extra-commands 'ace-window)))
#+END_SRC

*** Conf mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package conf-mode
    :ensure t
    :mode "\\.\\(screenrc\\)\\'")
#+END_SRC

*** Web mode config
TODO: disable autopair-mode for web-mode
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package web-mode
    :ensure t
    :mode "\\.jsp$"
    :mode "\\.html$")
#+END_SRC

*** C config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package cc-mode
    :init (setq ff-search-directories '("." "../inc" "../src"
                                        ;; for ee445m
                                        "../lib" "../../lib"))
    :config
    (use-package c++-mode :mode "\\.tcc$")
    (use-package c-eldoc
      :ensure t
      :config
      (setq c-eldoc-includes "`pkg-config gtk+-2.0 --cflags` -I./ -I../ ")))
#+END_SRC

*** FIC-mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package fic-mode
    :ensure t
    :config (add-hook 'prog-mode-hook 'turn-on-fic-mode))
#+END_SRC

*** Save desktop config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defadvice desktop-save-in-desktop-dir (before ensure-desktop-dir-exists activate)
      "Ensure `desktop-dirname' exists before function
    `desktop-save-in-desktop-dir' attempts to save the desktop
    file."
      (mkdir desktop-dirname t))

  (setq desktop-path '("~/.emacs.d/meta/desktop/") ;local desktop files
        desktop-base-filename "default"
        desktop-load-locked-desktop t     ;never freeze after crash
        backup-by-copying-when-linked t
        backup-by-copying-when-mismatch t)
  (mkdir (car desktop-path) t)            ; ensure desktop-save dir exists
  (desktop-save-mode 1)                   ;use desktop file
#+END_SRC

*** Savehist config
Keep a history of =M-x= across sessions.
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package savehist
    :ensure t
    :config
    (setq savehist-file (concat user-emacs-directory "meta/savehist"))
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))
    (savehist-mode 1))
#+END_SRC

*** Saveplace config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package saveplace
    :ensure t
    :config
    (setq-default save-place t)
    (setq save-place-file (format "%s/places" esc-meta-path)))
#+END_SRC

*** Xorg yank config
TODO: turn this into a minor mode for toggling with =esc-mode=
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq x-select-enable-clipboard t       ;global clipboard
        mouse-yank-at-point t)
#+END_SRC

*** Compilation config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq compile-command "make -k -j32"
          compilation-ask-about-save nil
          compilation-save-buffers-predicate '(lambda () nil)) ;never ask to save
#+END_SRC

TODO : associate with =esc-mode=
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package bury-successful-compilation
    :ensure t
    :config (bury-successful-compilation 1))
#+END_SRC

*** Byte compilation config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Diminish compiler warnings
  (setq byte-compile-warnings '(not interactive-only free-vars))
  (add-hook 'after-save-hook 'esc/auto-byte-recompile)
#+END_SRC

*** Recentf config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq recentf-auto-cleanup 'never)
  (use-package recentf
    :ensure t
    :config (setq recentf-max-menu-items 50
                  recentf-max-saved-items 50
                  recentf-save-file (format "%s/recentf" esc-meta-path)
                  recentf-keep '(file-remote-p file-readable-p)))
#+END_SRC

*** LaTeX config
Sounded like a good idea thanks to [[http://orgmode.org/worg/org-tutorials/org-latex-export.html][orgmode.com]]
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package latex
    :commands latex-mode
    :config
    (use-package writegood-mode :ensure t)
    (load "auctex.el" nil t t)
    ;;(load "preview-latex.el" nil t t)
    (setq TeX-command-default "latex"
          TeX-auto-save t
          TeX-parse-self t
          TeX-PDF-mode t
          latex-run-command "pdflatex")
    ;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (local-set-key (kbd "C-c C-s") 'latex-math-preview-expression))
#+END_SRC


*** Flyspell mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package flyspell
    :ensure t
    :config (setq flyspell-issue-message-flag nil))
#+END_SRC

*** Doc view mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (after 'doc-view-mode
    (setq doc-view-continuous t))
#+END_SRC

*** Abbrev mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package abbrev
    :config
    (setq abbrev-file-name "~/emacs.d/abbrev.lst" save-abbrevs t)
    (if (file-exists-p abbrev-file-name) ;load custom abbrevs
        (quietly-read-abbrev-file)))
#+END_SRC

*** Idle highlight config
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package idle-highlight
    :ensure t
    :disabled t
    :config (setq-default idle-highlight-idle-time 10.0))
#+END_SRC

*** Uniquify config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq uniquify-separator ":"
        uniquify-buffer-name-style 'post-forward)
  (use-package uniquify)
#+END_SRC

*** Ido config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package flx-ido
    :ensure t
    :init (setq ido-save-directory-list-file (format "%s/ido.last" esc-meta-path))
    :config
    (add-to-list 'ido-ignore-buffers "\\*Async Shell Command\\*")
    (add-to-list 'ido-ignore-buffers "^\\*.*\\.*preprocessed\\*")
    (ido-mode t)
    (ido-everywhere 1)
    (flx-ido-mode 1)
    (use-package ido-hacks
      :ensure t
      :config (ido-hacks-mode 1))
    ;; disable ido faces to see flx highlights.
    (setq ido-enable-flex-matching t
          ido-use-faces nil)
    (setq ido-create-new-buffer 'always
          ido-file-extensions-order '(".org" ".el"
                                      ".c" ".c"
                                      ".dox" ".txt")))
  (use-package ido-extras
    :ensure t
    :init
    (bind-key "M-i"     'ido-goto-symbol  esc-mode-map)
    (bind-key "C-x C-r" 'ido-recentf-open esc-mode-map)
    (bind-key "C-x C-b" 'ido-switch-buffer-current-major-mode esc-mode-map))
  (use-package ido-vertical-mode
    :ensure t
    :config (ido-vertical-mode 1))
#+END_SRC

*** Git gutter+ config
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package git-gutter+
    :ensure t
    :disabled t
    :config
    ;; Jump between hunks
    (define-key git-gutter+-mode-map (kbd "C-x n") 'git-gutter+-next-hunk)
    (define-key git-gutter+-mode-map (kbd "C-x p") 'git-gutter+-previous-hunk)
    ;; Act on hunks
    (define-key git-gutter+-mode-map (kbd "C-x v =") 'git-gutter+-show-hunk)
    ;; Stage hunk at point.
    ;; If region is active, stage all hunk lines within the region.
    (define-key git-gutter+-mode-map (kbd "C-x s") 'git-gutter+-stage-hunks)
    (define-key git-gutter+-mode-map (kbd "C-x c") 'git-gutter+-commit)
    (define-key git-gutter+-mode-map (kbd "C-x C") 'git-gutter+-stage-and-commit))
#+END_SRC

*** Multiple cursors config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package multiple-cursors :ensure t)
#+END_SRC

*** Visual Bookmark bm config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package bm
    :ensure t
    :commands bm-toggle bm-next bm-previous
    :config
    (after 'esc-mode
      (defhydra hydra-bm (esc-mode-map "C-c C-'")
        "bm"
        ("d" bm-toggle "drop/del")
        ("n" bm-next "next")
        ("p" bm-previous "prev"))))
#+END_SRC

*** Spotify config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package spotify
    :ensure t
    :commands spotify-enable-song-notifications
    :config
    (after 'esc-mode
      (defhydra hydra-spotify (esc-mode-map "<f7>")
         "spotify"
         ("c"   spotify-playpause "play/pause"
          "p"   spotify-previous  "prev"
          "n"   spotify-next      "next"))))
#+END_SRC

*** Ace config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package ace-jump-mode
    :ensure t
    :init
      (bind-key "C-c SPC" 'ace-jump-mode esc-mode-map)
      (bind-key "C-x SPC" 'ace-jump-mode-pop-mark esc-mode-map)
      (bind-key "C-M-S-l" 'ace-jump-buffer esc-mode-map)
    :config (ace-jump-mode-enable-mark-sync))

  (use-package ace-window
    :ensure t
    :config (setq aw-keys (number-sequence 97 (+ 97 7))))
#+END_SRC

*** Git messenger config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package git-messenger
    :ensure t
    :init (bind-key "C-c [" 'git-messenger:popup-message esc-mode-map))
#+END_SRC

*** Keyfreq mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package keyfreq
    :ensure t
    :config (keyfreq-autosave-mode 1)
            (setq keyfreq-file "~/.emacs.d/meta/keyfreq"))
#+END_SRC

*** Browse kill ring config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package browse-kill-ring
    :ensure t
    :config
    (setq kill-ring-max 80)
    (browse-kill-ring-default-keybindings))
#+END_SRC

*** Clipmon config
TODO: conform to use-packages way of creating stubs
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (defvar clipmon--autoinsert " clipmon--autoinserted-this")
  (use-package clipmon :ensure t)
#+END_SRC

*** Mouse avoidance config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (mouse-avoidance-mode 'exile)
#+END_SRC

*** Bitly config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (autoload 'json-read "json.el")
  (use-package bitly
    :ensure t
    :config (setq bitly-access-token "b4a5cd4e51df442ab97012cfc2764c599d6eabf8"))
#+END_SRC

*** Paradox config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package paradox
    :ensure t
    :config
    (setq paradox-execute-asynchronously t
          paradox-automatically-star nil
          paradox-github-token nil))
#+END_SRC

*** Weather-mento config
#+BEGIN_SRC emacs-lisp :comments link :tangle :comments link :tangle yes
  (setq weather-metno-location-name "Austin, Texas"
        weather-metno-location-latitude 30
        weather-metno-location-longitude 97)
#+END_SRC

*** Workgroups config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package workgroups
    :ensure t
    :disabled t
    :config (setq wg-morph-on nil))
#+END_SRC

*** Persp mode conf
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (use-package persp-mode
    :ensure t
    :disabled t
    :config
    (setq persp-save-dir (format "%s/persp-confs" esc-meta-path))
    (add-hook 'after-init-hook '(lambda () (persp-mode 1))))
#+END_SRC

*** Haskell mode conf
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package haskell-mode
    :ensure t
    :config
    (use-package haskell-indent-mo
      :ensure t
      :disabled t
      :init (add-hook 'haskell-mode-hook 'haskell-indent-mode)))
#+END_SRC

*** Clean mode line conf
Take this opportunity to refresh the mode line. Inspiration from
[[http://www.masteringemacs.org/article/hiding-replacing-modeline-strings][Mastering Emacs]].
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package clean-mode-line
    :config
    (setq clean-mode-line-alist
          `(;; Major modes
            (enh-ruby-mode . "enh-Rb")
            (ruby-mode   . "Rb")
            (python-mode . "Py")
            (lisp-interaction-mode . "λ")
            (emacs-lisp-mode . "eλ")
            (lisp-mode . "λ")))
    (add-hook 'after-change-major-mode-hook 'clean-mode-line))
#+END_SRC

*** Pretty lambdada config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package pretty-lambdada
    :ensure t
    :init (mapc (lambda (prettify-this-mode)
                  (add-hook prettify-this-mode 'pretty-lambda))
                '(emacs-lisp-mode-hook
                  org-mode-hook ;to include source blocks :\
                  enh-ruby-mode-hook
                  ruby-mode-hook)))
#+END_SRC

*** Magit config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package magit
    :ensure t
    :commands magit-status)
#+END_SRC

*** Expand region config
[[http://spw.sdf.org/blog/tech/emacs/expandregionlines.html][Notes from the Library : /blog/tech/emacs/expandregionlines.html]]
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package expand-region
    :ensure t
    :init (bind-key "C-;" 'er/expand-region esc-mode-map)
    :config
    (defadvice er/expand-region (around fill-out-region activate)
      (if (or (not (region-active-p))
              (eq last-command 'er/expand-region))
          ad-do-it
        (if (< (point) (mark))
            (let ((beg (point)))
              (goto-char (mark))
              (end-of-line)
              (forward-char 1)
              (push-mark)
              (goto-char beg)
              (beginning-of-line))
          (let ((end (point)))
            (goto-char (mark))
            (beginning-of-line)
            (push-mark)
            (goto-char end)
            (end-of-line)
            (forward-char 1))))))
#+END_SRC

*** Autopair config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package autopair
    :ensure t
    :commands autopair-global-mode)
#+END_SRC

*** Lexbind config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package lexbind-mode
    :ensure t
    :init (add-hook 'emacs-lisp-mode-hook 'lexbind-mode))
#+END_SRC

*** Misc cmds config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package misc
    :commands zap-up-to-char
    :init ; seeing as I don't use these commands terribly often
    (after 'esc-mode
      (esc-key "M-z"     'zap-up-to-char) ; up-to, life saver
      (esc-key "M-Z"     'zap-to-char)))

  (use-package misc-cmds
    :commands revert-buffer-no-confirm
    :init ; takes a while to need the get-out-of-jail-free button
    (after 'esc-mode
      (esc-key "C-x M-r" 'revert-buffer-no-confirm)))
#+END_SRC

TODO : advice mc zap-up-to-char
#+BEGIN_SRC emacs-lisp :comments link :tangle yes

#+END_SRC

#+BEGIN_SRC emacs-lisp :comments link :tangle no
    ;; this was determined to have a bug in it. Handle the bug
    ;;(setq revert-buffer-function (if (esc-mode-enabledp)
    ;;                                 'revert-buffer-keep-undo
    ;;                               'revert-buffer))
#+END_SRC

*** Helm config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Helm
  (use-package helm
    :ensure t
    :init (after 'esc-mode
            (esc-keys
              ("C-c i"   . helm-imenu)
              ("C-x C-j" . helm-for-files))))
#+END_SRC

*** Rainbow delimeters mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Fringe mode config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (fringe-mode 0)
#+END_SRC

*** Windmove config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ;; Windmove from shift keys
  (use-package windmove
    :ensure t
    :config (windmove-default-keybindings))
#+END_SRC

*** Org cliplink config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package org-cliplink
    :init (after 'esc-mode
            (esc-key "C-c C-M-l" 'org-cliplink)))
#+END_SRC

*** Dictionary config
#+BEGIN_SRC emacs-lisp :comments link :tangle :comments link :tangle yes
  (use-package dictionary
    :ensure t
    :config
    (defun esc/dictionary-search ()
      (interactive)
      (autoload 'dictionary-new-search "dictionary")
      (let* ((enable-recursive-minibuffers t)
             (word (current-word))
             (word-wrapped (if word (concat " (" word ")") ""))
             (word-query (concat "Word" word-wrapped ": "))
             (val (read-from-minibuffer word-query)))
        (dictionary-new-search
         (cons (cond
                ((and (equal val "") word) word)
                ((> (length val) 0) val)
                (t (error "No word to lookup")))
               dictionary-default-dictionary)))))
#+END_SRC

*** Unkillable scratch config
TODO: integrate with =esc-mode=
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package unkillable-scratch
    :ensure t
    :config
    (unkillable-scratch 1)
    (setq unkillable-scratch-behavior 'bury))
#+END_SRC

*** Minibuffer config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
#+END_SRC

*** Org indent header config
TODO: use like =org-indent-mode=
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package org-indent-header :ensure t)
#+END_SRC

*** Dired config
TODO: keymaps go in =esc-mode=
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package dired-details
    :config (dired-details-install)
    :init
    (use-package dired-x)
  (use-package dash
      :ensure t
      :init
      ;; Reload dired after making changes
      (put '--each 'lisp-indent-function 1)
      (--each '(dired-do-rename
                dired-create-directory
                wdired-abort-changes)
        (eval `(defadvice ,it (after revert-buffer activate)
                 (revert-buffer)))))
    (use-package wdired
      :config
      (define-key wdired-mode-map
        (vector 'remap 'beginning-of-line) 'esc/dired-back-to-start-of-files)
      (define-key wdired-mode-map
        (vector 'remap 'esc/back-to-indentation-or-beginning)
        'esc/dired-back-to-start-of-files)
      (define-key wdired-mode-map
        (vector 'remap 'beginning-of-buffer) 'esc/dired-back-to-top)
      (define-key wdired-mode-map
        (vector 'remap 'end-of-buffer) 'esc/dired-jump-to-bottom)))
#+END_SRC

*** Diminish config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (use-package diminish
    :config
    (after 'undo-tree-autoloads
      (global-undo-tree-mode t)
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-relative-timestamps t))

    ;; less clutter on the mode line
    (diminish 'auto-revert-mode)
    (after 'test-mode (diminish 'test-mode))
    (diminish 'auto-fill-function)
    ;; (diminish 'visual-line-mode)
    ;; (diminish 'global-visual-line-mode)
    (after 'autopair  (diminish 'autopair-mode))
    (after 'abbrev    (diminish 'abbrev-mode))
    (after 'undo-tree (diminish 'undo-tree-mode))
    (after 'org-indent (diminish 'org-indent-mode))
    (after 'magit (diminish 'magit-auto-revert-mode))
    (after 'fic-mode (diminish 'fic-mode))
    (after 'eldoc (diminish 'eldoc-mode))
    (after 'smerge-mode (diminish 'smerge-mode))
    ;; (after 'auto-complete (diminish 'auto-complete-mode))
    (after 'esc-mode (diminish 'esc-mode)))
#+END_SRC

*** Compilation buffer config
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (add-to-list 'same-window-buffer-names "*compilation*")
#+END_SRC

** OS configuration
Operating system-specific configurations take place here, within this
massive =cond=.
#+NAME: Operating System specific configurations
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (cond ((or (eq system-type 'ms-dos)
             (eq system-type 'windows-nt)
             (eq system-type 'cygwin))

         ;; Windows config
         (setq w32-pass-lwindow-to-system nil
               w32-pass-rwindow-to-system nil
               w32-pass-apps-to-system nil
               w32-lwindow-modifier 'super ; Left Windows key
               w32-rwindow-modifier 'super ; Right Windows key
               w32-apps-modifier 'hyper)   ; Menu key
         (require-package '(w32-symlinks)
#+END_SRC

Note: for GNU Emacs compiled for Microsoft, both of the below options
need to be set in order to follow symlinks. The shell snippet tells
cygwin to create symlinks in a friendly format (old links need to be
regenerated with this flag) and the sexp is loaded by Emacs allowing
transparent use of symlinks.

#+BEGIN_SRC sh :comments link :tangle no
  # TODO: tangle me
  export CYGWIN="nodosfilewarning winsymlinks"
#+END_SRC

#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (customize-option 'w32-symlinks-handle-shortcuts)
#+END_SRC

#+BEGIN_SRC emacs-lisp :comments link :tangle yes
           ))
#+END_SRC

Begin Mac OS configuration

#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  ((or (eq system-type 'darwin))
   (setq mac-command-modifier 'meta)
   (setq mac-option-modifier 'super)
   (setq ns-function-modifier 'hyper)))
#+END_SRC

** org config
My favorite mode. This was the reason I started using Emacs, didja
know?
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
    ;; Org mode bindings -- TODO: in use-pcakage

  (setq org-replace-disputed-keys t)
  (use-package org
    :ensure t
    :init
    (setq-default major-mode 'org-mode)  ;default mode for new buffers

    :config
    ;;; org advice -- shrink the agenda buffer and keep it that way
    (defadvice org-agenda (around shrink-agenda-buffer activate)
      "Shrink the agenda after initial display."
      ad-do-it
      (shrink-window-if-larger-than-buffer))

    ;; keep it shrunken upon refresh
    (defadvice org-agenda-redo (around shrink-agenda-buffer-after-refresh activate)
      "Shrink the agenda after refreshing the display."
      ad-do-it
      (shrink-window-if-larger-than-buffer))
    ;;; end org advice

    (setq org-checkbox-hierarchical-statistics nil
          org-hierarchical-todo-statistics nil
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-clock-persist 'history
          org-habit-graph-column 55
          org-hide-leading-stars t
          org-directory "~/org"
          org-imenu-depth 3
          org-agenda-files (append '("~/workspace/ee445m-labs/doc/todo.org"
                                     "~/workspace/ee445m-labs/doc/lab-manuals/todo.org"
                                     "~/org/intel.org"
                                     "~/org/todo.org")))
    (after 'esc-mode
      (esc-keys
          ("C-,"     . org-cycle-agenda-files)
          ("C-c a"   . org-agenda)
          ("C-c l l" . org-store-link)))

    (add-to-list 'org-modules 'org-habit)
    (mapc (lambda (easy-template)
            (add-to-list 'org-structure-template-alist easy-template))
          '(("E"
              "#+BEGIN_SRC emacs-lisp :comments link :tangle yes?\n\n#+END_SRC"
              "<emacs-lisp>\n?\n</emacs-lisp>")
            ("S"
              "#+BEGIN_SRC ? :comments link :tangle yes\n\n#+END_SRC"
              "<src lang=\"?\">\n\n</src>")))

    (defun esc/org-confirm-babel ()
      (setq org-confirm-babel-evaluate nil)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '(;; Always execute these languages
         (R           . t)
         (ditaa       . t)
         (dot         . t)
         (plantuml    . t)
         (emacs-lisp  . t)
         (lisp        . t)
         (clojure     . t)
         (scala       . t)
         (gnuplot     . t)
         (haskell     . t)
         (ocaml       . t)
         (python      . t)
         (ruby        . t)
         (sh          . t)
         (sqlite      . t)
         (octave      . t)
         (plantuml    . t)
         ;; Never execute these languages
         (screen      . nil)
         (sql         . nil))))

    (add-hook 'org-mode-hook 'esc/org-confirm-babel)

    (use-package ox-latex
      ;; optimize: probably possible to optimize use-package's loading
      ;; of the below code
      :init
      ;; Add minted to the defaults packages to include when exporting.
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      ;; Tell the latex export to use the minted package for source
      ;; code coloration.
      (setq org-latex-listings 'minted)
      ;; Let the exporter use the -shell-escape option to let latex
      ;; execute external programs.
      ;; This obviously and can be dangerous to activate!
      (setq org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))))
#+END_SRC
[[http://lists.gnu.org/archive/html/emacs-orgmode/2012-05/msg00708.html][More information on defining your own Easy Templates]].

*** org capture
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (setq org-default-notes-file (concat org-directory "/capture.org"))
  (after 'org
    (after 'esc-mode
      (esc-key "C-c C-p" 'org-capture)))

  (setq org-capture-templates
        '(;; General tasks go here
          ("t" "Todo" entry
           (file+headline (concat org-directory "/todo.org") "Tasks")
           "* TODO %?\n  %a")
          ;; Used to record my state
          ("j" "Journal" entry
           (file+datetree (concat org-directory "/journal.org"))
           "* %?\nEntered on %U\n  %i\n  %a")

          ;;; Work-related captures
          ("c" "Centaur" entry
           (file+datetree (concat org-directory "/centtech/centtech.org"))
           "* TODO %?\n  %i\n  %a")

          ;;; Personal captures
          ;; Notes about Super Smash Bros. 64
          ("s" "Smash Bros." entry
           (file+headline (concat org-directory "/smash/smash.org") "Notes")
           "* %?\n")))
#+END_SRC

*** org refile
#+BEGIN_SRC emacs-lisp :comments link :tangle no
  (setq ;; Work refile locations
   esc-refile-targets-centtech
   `(,(concat org-directory "/centtech/lru.org")
     ,(concat org-directory "/centtech/pse.org")
     ,(concat org-directory "/centtech/newreg.org"))

   ;; Personal refile locations
   esc-refile-targets-smash
   `(,(concat org-directory "/smash/64.org")
     ,(concat org-directory "/smash/melee.org")
     ,(concat org-directory "/smash/pm.org"))

   org-refile-targets '((nil                         :maxlevel . 5)
                        (esc-refile-targets-centtech :maxlevel . 5)
                        (esc-refile-targets-smash    :maxlevel . 5)
                        (org-agenda-files            :maxlevel . 4)))
#+END_SRC

** Fin
Start the emacs server we got this far without error
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (server-start)
#+END_SRC

Have a great day
#+BEGIN_SRC emacs-lisp :comments link :tangle yes
  (setq Don t    ;allows `eval-buffer' on *scratch*
        Panic t  ;with `initial-scratch-message'
        initial-scratch-message
         (concat (propertize "Don't\nPanic\n"
                     'font-lock-face '(:height 10.0 :inherit variable-pitch))
                 "\n")) ;newline makes inserted text normal-sized
  (message "All done, %s%s" (user-login-name) ".")
  ;;; .emacs.el ends here
#+END_SRC

* TODOs
** TODO tangling scripts adds execute permission
(write-region "" nil custom-file)
implement via advice
** TODO advise zap-up-to-char
if the last command was zap-up-to-char, don't ask me again (context: multiple-cursors)
* TODO work branch
from travis ci, every push create a zipped bunudle of the new
.emacs. Use the fact that travis ci won't have a proxy but work
does. travis ci will push the zip to a branch of your repo on github
and you can pull a constantly up-to-date fully-installed version from
behind a proxy at any time


